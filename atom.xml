<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arunyang</title>
  
  <subtitle>Linux,Golang,JS,Java</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.arunyang.com/"/>
  <updated>2018-09-20T04:35:59.000Z</updated>
  <id>http://www.arunyang.com/</id>
  
  <author>
    <name>arunyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日志分析专题</title>
    <link href="http://www.arunyang.com/2018/09/20/20180920123246/"/>
    <id>http://www.arunyang.com/2018/09/20/20180920123246/</id>
    <published>2018-09-20T04:32:46.000Z</published>
    <updated>2018-09-20T04:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/20/20180920123246/20180904121622.png" style="border:none;"></p><hr><blockquote><p>日志分析是工作中最重要的部分,如何快速的检索到自己所需要的日志信息非常的重要。<br>重要的日志debug分析工具: <code>http://grokdebug.herokuapp.com/</code><br><a id="more"></a></p></blockquote><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><blockquote><p>golang-demo<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>python-demo<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/20/20180920123246/20180904121622.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;日志分析是工作中最重要的部分,如何快速的检索到自己所需要的日志信息非常的重要。&lt;br&gt;重要的日志debug分析工具: &lt;code&gt;http://grokdebug.herokuapp.com/&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.arunyang.com/categories/Linux/"/>
    
    
      <category term="ELK" scheme="http://www.arunyang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Git实用命令纪实</title>
    <link href="http://www.arunyang.com/2018/09/13/20180913121605/"/>
    <id>http://www.arunyang.com/2018/09/13/20180913121605/</id>
    <published>2018-09-13T04:16:05.000Z</published>
    <updated>2018-10-30T00:30:28.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/13/20180913121605/20180904121622.png" style="border:none;"></p><hr><blockquote><p>本文介绍git,解释添加代码注释,及时回滚,避免今天造成的代码误删除的情况,还得从新再次写一遍</p><a id="more"></a></blockquote><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><blockquote><p>初建仓库时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Command line instructions</span><br><span class="line"></span><br><span class="line">Git global setup</span><br><span class="line">git config --global user.name &quot;YangZhenguang&quot;</span><br><span class="line">git config --global user.email &quot;zhenguang.yang@ele.me&quot;</span><br><span class="line"></span><br><span class="line">Create a new repository</span><br><span class="line">git clone git@git.elenet.me:zhenguang.yang/test.git</span><br><span class="line">cd test</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">Existing folder</span><br><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@git.elenet.me:zhenguang.yang/test.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">Existing Git repository</span><br><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin git@git.elenet.me:zhenguang.yang/test.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代码冲突解决惨案<br><img src="/2018/09/13/20180913121605/20181030082829.png" style="border:none;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进行代码合并解决冲突时,特别是和同事的初始化的仓库(之前是有Git记录的,因为仓库重新创建,虽然本地的仓库有记录,但是pull只有把本地的配置给覆盖了)</span><br><span class="line">所以一定一定pull拉取冲突时,用rmtrash删除,并记得从回收站里把这些删除的问题备份!!!(非常重要),如上所示.</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/13/20180913121605/20180904121622.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;本文介绍git,解释添加代码注释,及时回滚,避免今天造成的代码误删除的情况,还得从新再次写一遍&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.arunyang.com/categories/Linux/"/>
    
    
      <category term="Git" scheme="http://www.arunyang.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何用好Cgroup用于线上生产</title>
    <link href="http://www.arunyang.com/2018/09/12/20180912193700/"/>
    <id>http://www.arunyang.com/2018/09/12/20180912193700/</id>
    <published>2018-09-12T11:37:00.000Z</published>
    <updated>2018-09-14T06:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/12/20180912193700/cgroup_pie_chart.png" style="border:none;"></p><hr><blockquote><a id="more"></a></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="Cgroup基于内核的控制案例演示"><a href="#Cgroup基于内核的控制案例演示" class="headerlink" title="Cgroup基于内核的控制案例演示"></a>Cgroup基于内核的控制案例演示</h3><p>   如上图所示，这里把总体资源看做一个饼图，其中资源称作”slice”，slices默认值为1024。控制资源使用有个概念为”shares”，这里的shares是在相同的cgroup组中相对对于其他资源的相对值和slice数量。这里system，User和Machine分别设置为1024slice。</p><ul><li>System - 1024<ul><li>httpd - 1024</li><li>sshd - 1024</li><li>crond - 1024</li><li>gdm - 1024</li></ul></li><li>User - 1024<ul><li>bash (mrichter) - 1024</li><li>bash (dorf) - 1024</li></ul></li><li><p>Machine - 1024</p><ul><li><p>testvm - 1024</p><p>在这个例子中，在单个虚拟机中，2个用户登录，有几个进程在运行。现在我们假定每个进程尽可能地使用更过的cpu。这里System/User/Machine会分别给33.333%的CPU，System中每个work会用33.333/4约8.25%的cpu时间。User中每个33.333/2约 16.5%的cpu，假如bash (mrichter)退出，bash (dorf)将可以使用33.333%的CPU。</p><h3 id="如何设置slices的值"><a href="#如何设置slices的值" class="headerlink" title="如何设置slices的值"></a>如何设置slices的值</h3><blockquote><p>使用<code>systemctl set-property</code><br><img src="/2018/09/12/20180912193700/20180913193809.png" style="border:none;"></p></blockquote></li></ul></li></ul><h3 id="对应配置目录"><a href="#对应配置目录" class="headerlink" title="对应配置目录"></a>对应配置目录</h3><p>当用systemctl命令设置properties属性时，会在 /etc/systemd/system目录自动地生成。</p><h2 id="如何调优"><a href="#如何调优" class="headerlink" title="如何调优?"></a>如何调优?</h2><blockquote><p>获取当前slice的状态</p></blockquote><h3 id="systemd-cgls-–no-page"><a href="#systemd-cgls-–no-page" class="headerlink" title="systemd-cgls –no-page"></a>systemd-cgls –no-page</h3><blockquote><p>提供cgroups和进程的树形运行状态.</p></blockquote><p>[root@wgg-bjdev-opstools-3 ~]# systemd-cgls –no-page<br>├─1 /usr/lib/systemd/systemd –system –deserialize 21<br>├─user.slice<br>│ └─user-1002.slice<br>│   ├─session-49107.scope<br>│   │ ├─ 5873 systemd-cgls –no-page<br>│   │ ├─13914 sshd: ops [priv]<br>│   │ ├─13916 sshd: ops@pts/0<br>│   │ ├─13917 -bash<br>│   │ ├─14044 sudo -s<br>│   │ └─14045 /bin/bash<br>│   └─session-35831.scope<br>│     └─10416 /usr/bin/rsync –daemon –config=/etc/rsyncd.conf<br>└─system.slice<br>  ├─cpupresson.service<br>  │ └─25455 /home/ops/lessonsix</p><p>从输出看出,只有user.slice 和 system.slice两个top level slice,在系统上这里没有如上饼图的”Machine”所示VMs机器,所以user.slice 和 system.slice分别可获得50%的资源配额。</p><h3 id="systemd-cgtop"><a href="#systemd-cgtop" class="headerlink" title="systemd-cgtop"></a>systemd-cgtop</h3><blockquote><p>类似top命令,可以实时查看resource usage使用情况,按照path,task,cpu,memory,I/O进行排序。</p></blockquote><p><img src="/2018/09/12/20180912193700/20180914123558.png" style="border:none;"></p><p>看到这里了 <a href="https://www.redhat.com/en/blog/world-domination-cgroups-part-2-turning-knobs" target="_blank" rel="noopener">https://www.redhat.com/en/blog/world-domination-cgroups-part-2-turning-knobs</a></p><p>关于Cgroup设置<br>比较基础的入门讲解：<br><a href="https://www.redhat.com/en/about/blog/world-domination-cgroups-part-1-cgroup-basics" target="_blank" rel="noopener">https://www.redhat.com/en/about/blog/world-domination-cgroups-part-1-cgroup-basics</a><br><a href="https://www.redhat.com/en/about/blog/world-domination-cgroups-part-2-turning-knobs" target="_blank" rel="noopener">https://www.redhat.com/en/about/blog/world-domination-cgroups-part-2-turning-knobs</a></p><p><a href="https://www.redhat.com/en/about/blog/world-domination-cgroups-part-3-thanks-memories" target="_blank" rel="noopener">https://www.redhat.com/en/about/blog/world-domination-cgroups-part-3-thanks-memories</a><br><a href="https://www.redhat.com/en/about/blog/world-domination-cgroups-part-4-all-ios" target="_blank" rel="noopener">https://www.redhat.com/en/about/blog/world-domination-cgroups-part-4-all-ios</a></p><p>RedHat的文档手册：<br><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Resource_Management_Guide/chap-Using_Control_Groups.html" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Resource_Management_Guide/chap-Using_Control_Groups.html</a></p><p>New Control Group Interfaces<br><a href="https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/" target="_blank" rel="noopener">https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/</a></p><p>Cgroup FS 数据结构<br><a href="https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt</a></p><p>内存资源配置及用例<br><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt</a></p><p>I/O资源控制及用例<br><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt</a></p><p>设备白名单控制及用例<br><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/devices.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/devices.txt</a></p><p>CPU资源控制及用例<br><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt</a><br><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cpuacct.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/cpuacct.txt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/12/20180912193700/cgroup_pie_chart.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.arunyang.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.arunyang.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>带你手撸一个小型发布系统</title>
    <link href="http://www.arunyang.com/2018/09/04/20180904121128/"/>
    <id>http://www.arunyang.com/2018/09/04/20180904121128/</id>
    <published>2018-09-04T04:11:28.000Z</published>
    <updated>2018-09-04T04:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/04/20180904121128/20180904121622.png" style="border:none;"></p><hr><blockquote><p>代码发布在一个产品生命周期中发挥着至关重要的作用,甚至可以说是伴随着一个产品的生命周期。代码发布系统有比较成熟的和其它系统集成的CI/CD系统，也有很灵活的各种插件的集成发布系统(例如jenkins)，也有小型的为了满足小规模小系统的需求的系统。最原始运维是手动的发布新的代码,然后覆盖老的代码这种方式,本文一步步带你实现如何把手动的经验累积为一个小的发布系统,释放双手,界面如上图所示。</p><a id="more"></a></blockquote><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><blockquote><p>代码依赖:cat requirements.txt<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Babel==<span class="number">0.9</span><span class="number">.6</span></span><br><span class="line">backports.ssl-match-hostname==<span class="number">3.4</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">chardet==<span class="number">2.2</span><span class="number">.1</span></span><br><span class="line">click==<span class="number">6.7</span></span><br><span class="line">configobj==<span class="number">4.7</span><span class="number">.2</span></span><br><span class="line">decorator==<span class="number">3.4</span><span class="number">.0</span></span><br><span class="line">Flask==<span class="number">0.12</span><span class="number">.2</span></span><br><span class="line">Flask-SQLAlchemy==<span class="number">2.0</span></span><br><span class="line">iniparse==<span class="number">0.4</span></span><br><span class="line">iotop==<span class="number">0.6</span></span><br><span class="line">itsdangerous==<span class="number">0.24</span></span><br><span class="line">Jinja2==<span class="number">2.7</span><span class="number">.2</span></span><br><span class="line">kitchen==<span class="number">1.1</span><span class="number">.1</span></span><br><span class="line">M2Crypto==<span class="number">0.21</span><span class="number">.1</span></span><br><span class="line">MarkupSafe==<span class="number">0.11</span></span><br><span class="line">meld3==<span class="number">1.0</span><span class="number">.2</span></span><br><span class="line">msgpack-python==<span class="number">0.4</span><span class="number">.6</span></span><br><span class="line">pycrypto==<span class="number">2.6</span><span class="number">.1</span></span><br><span class="line">pycurl==<span class="number">7.19</span><span class="number">.0</span></span><br><span class="line">pygobject==<span class="number">3.8</span><span class="number">.2</span></span><br><span class="line">pygpgme==<span class="number">0.3</span></span><br><span class="line">pyliblzma==<span class="number">0.5</span><span class="number">.3</span></span><br><span class="line">pyudev==<span class="number">0.15</span></span><br><span class="line">pyxattr==<span class="number">0.5</span><span class="number">.1</span></span><br><span class="line">PyYAML==<span class="number">3.10</span></span><br><span class="line">pyzmq==<span class="number">14.3</span><span class="number">.1</span></span><br><span class="line">requests==<span class="number">2.6</span><span class="number">.0</span></span><br><span class="line">salt==<span class="number">2015.5</span><span class="number">.8</span></span><br><span class="line">six==<span class="number">1.3</span><span class="number">.0</span></span><br><span class="line">SQLAlchemy==<span class="number">1.1</span><span class="number">.11</span></span><br><span class="line">supervisor==<span class="number">3.3</span><span class="number">.1</span></span><br><span class="line">supervisor-quick==<span class="number">0.1</span><span class="number">.4</span></span><br><span class="line">urlgrabber==<span class="number">3.10</span></span><br><span class="line">urllib3==<span class="number">1.10</span><span class="number">.2</span></span><br><span class="line">virtualenv==<span class="number">13.1</span><span class="number">.2</span></span><br><span class="line">Werkzeug==<span class="number">0.12</span><span class="number">.2</span></span><br><span class="line">yum-metadata-parser==<span class="number">1.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></p></blockquote><p>如何使用参考: <a href="https://blog.csdn.net/loyachen/article/details/52028825" target="_blank" rel="noopener">https://blog.csdn.net/loyachen/article/details/52028825</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/04/20180904121128/20180904121622.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;代码发布在一个产品生命周期中发挥着至关重要的作用,甚至可以说是伴随着一个产品的生命周期。代码发布系统有比较成熟的和其它系统集成的CI/CD系统，也有很灵活的各种插件的集成发布系统(例如jenkins)，也有小型的为了满足小规模小系统的需求的系统。最原始运维是手动的发布新的代码,然后覆盖老的代码这种方式,本文一步步带你实现如何把手动的经验累积为一个小的发布系统,释放双手,界面如上图所示。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.arunyang.com/categories/Python/"/>
    
    
      <category term="Devops" scheme="http://www.arunyang.com/tags/Devops/"/>
    
      <category term="CI/CD" scheme="http://www.arunyang.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Golang之添加&quot;Example&quot;代码注释</title>
    <link href="http://www.arunyang.com/2018/08/30/20180830124045/"/>
    <id>http://www.arunyang.com/2018/08/30/20180830124045/</id>
    <published>2018-08-30T04:40:45.000Z</published>
    <updated>2018-09-07T12:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/30/20180830124045/20180830124600.png" style="border:none;"></p><hr><blockquote><p>在编程中养成代码注释是一个非常好的习惯，一个是自己能够形成积累(很久之后再回来看自己代码的时候不至于看不懂,O(∩_∩)O哈哈~)，二是便于同行之间的交流。Golang添加代码注释非常的简单，只需要在每个函数或类前添加双斜线然后写注释即可，更加实用的方式是写的代码有例子，这样别人看你的代码一眼就知道怎么用了。下面来演示具体实现:</p><a id="more"></a></blockquote><h2 id="Golang之添加注释演示"><a href="#Golang之添加注释演示" class="headerlink" title="Golang之添加注释演示"></a>Golang之添加注释演示</h2><blockquote><p>注意:这个文件应该命名为:math.go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// math.go 文件</span></span><br><span class="line"><span class="comment">// smath 提供一些简单的数学函数</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Math 其实啥都没做</span></span><br><span class="line"><span class="keyword">type</span> Math <span class="keyword">struct</span>&#123;</span><br><span class="line">simplenumber <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 没有做啥的error</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrorSimple = errors.New(<span class="string">"simple err"</span>)</span><br><span class="line">ErrorNotSimple = errors.New(<span class="string">"not simple err"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// New 创建一个Math对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span>*<span class="title">Math</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Math&#123;&#125;           <span class="comment">//(3)拓展:创建对象的三种方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: OldAdd 老旧的方法，不建议使用了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OldAdd</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add 两数相加</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     result := Add(3,4)</span></span><br><span class="line"><span class="comment">//     result = 7</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 欢迎使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="params">(result <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add 两数相加</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Math)</span><span class="title">AddOb</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add 非外部方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> mathOb = New()                   <span class="comment">//(3)拓展:创建对象的三种方式</span></span><br><span class="line">mathOb.simplenumber = <span class="number">12</span></span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>,mathOb)</span><br><span class="line"></span><br><span class="line">fmt.Println(OldAdd(<span class="number">1</span>,<span class="number">2</span>))     <span class="comment">//(1)注意这里注释的删除效果,见下图1</span></span><br><span class="line"></span><br><span class="line">fmt.Println(Add(<span class="number">3</span>,<span class="number">4</span>))        <span class="comment">//(2)注意这里代码注释的Example示例,见下图2</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mathOb.AddOb(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(add(<span class="number">7</span>,<span class="number">8</span>))</span><br><span class="line">&#125;<span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">&amp;&#123;simplenumber:12&#125;</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><p>图1:<img src="/2018/08/30/20180830124045/20180830125605.png" style="border:none;"></p><p>图2:<img src="/2018/08/30/20180830124045/20180830124600.png" style="border:none;"></p><blockquote><p>对应的Add函数的代码文件,此文件命名为:math_test.go<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func ExampleAdd() &#123;   //注意应该为目标函数前添加Example关键字</span><br><span class="line">fmt.Println(Add(3,4))</span><br><span class="line">// Output: 7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Go拓展-创建对象的三种方式"><a href="#Go拓展-创建对象的三种方式" class="headerlink" title="Go拓展:创建对象的三种方式"></a>Go拓展:创建对象的三种方式</h2><p>简化三种用法:<br> a := &amp;user{}<br> b := user{}<br> c := new(user)<br>代码如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">   id <span class="keyword">int</span> <span class="string">`1123`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := &amp;user&#123;&#125;</span><br><span class="line">   a.id = <span class="number">111</span></span><br><span class="line"></span><br><span class="line">   b := user&#123;&#125;</span><br><span class="line">   b.id = <span class="number">222</span></span><br><span class="line"></span><br><span class="line">   c := <span class="built_in">new</span>(user)</span><br><span class="line">   c.id = <span class="number">333</span></span><br><span class="line">   fmt.Println(a, b, c)</span><br><span class="line">&#125;<span class="comment">/*运行后结果如下=&gt;</span></span><br><span class="line"><span class="comment">&amp;&#123;111&#125; &#123;222&#125; &amp;&#123;333&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>根据输出可知:</p><blockquote><p>new(user)和 &amp;user{}这两种方法返回的数据都是一样的，那么这这两种数据究竟有什么不同？我们应该在什么场景使用呢？<br><code>&amp;{111}返回的是实例化的对象的指针</code><br><code>{222}返回的是一个类型</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/30/20180830124045/20180830124600.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;在编程中养成代码注释是一个非常好的习惯，一个是自己能够形成积累(很久之后再回来看自己代码的时候不至于看不懂,O(∩_∩)O哈哈~)，二是便于同行之间的交流。Golang添加代码注释非常的简单，只需要在每个函数或类前添加双斜线然后写注释即可，更加实用的方式是写的代码有例子，这样别人看你的代码一眼就知道怎么用了。下面来演示具体实现:&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://www.arunyang.com/categories/Golang/"/>
    
    
      <category term="GolangGrammar" scheme="http://www.arunyang.com/tags/GolangGrammar/"/>
    
  </entry>
  
  <entry>
    <title>Python常用工具之终端颜色</title>
    <link href="http://www.arunyang.com/2018/08/07/20180807093621/"/>
    <id>http://www.arunyang.com/2018/08/07/20180807093621/</id>
    <published>2018-08-07T01:36:21.000Z</published>
    <updated>2018-08-07T01:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/07/20180807093621/20180807095325.png" style="border:none;"></p><hr><blockquote><p>线上经常执行脚本时需要根据各种情况把输出内容按照颜色进行区分,效果如上,代码如下<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#   格式：\033[显示方式;前景色;背景色m</span></span><br><span class="line"><span class="comment">#   说明:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   前景色            背景色            颜色</span></span><br><span class="line"><span class="comment">#   ---------------------------------------</span></span><br><span class="line"><span class="comment">#     30                40              黑色</span></span><br><span class="line"><span class="comment">#     31                41              红色</span></span><br><span class="line"><span class="comment">#     32                42              绿色</span></span><br><span class="line"><span class="comment">#     33                43              黃色</span></span><br><span class="line"><span class="comment">#     34                44              蓝色</span></span><br><span class="line"><span class="comment">#     35                45              紫红色</span></span><br><span class="line"><span class="comment">#     36                46              青蓝色</span></span><br><span class="line"><span class="comment">#     37                47              白色</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   显示方式           意义</span></span><br><span class="line"><span class="comment">#   -------------------------</span></span><br><span class="line"><span class="comment">#      0           终端默认设置</span></span><br><span class="line"><span class="comment">#      1             高亮显示</span></span><br><span class="line"><span class="comment">#      4            使用下划线</span></span><br><span class="line"><span class="comment">#      5              闪烁</span></span><br><span class="line"><span class="comment">#      7             反白显示</span></span><br><span class="line"><span class="comment">#      8              不可见</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   例子：</span></span><br><span class="line"><span class="comment">#   \033[1;31;40m    &lt;!--1-高亮显示 31-前景色红色  40-背景色黑色--&gt;</span></span><br><span class="line"><span class="comment">#   \033[0m          &lt;!--采用终端默认设置，即取消颜色设置--&gt;]]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STYLE = &#123;</span><br><span class="line">        <span class="string">'fore'</span>:</span><br><span class="line">        &#123;   <span class="comment"># 前景色</span></span><br><span class="line">            <span class="string">'black'</span>    : <span class="number">30</span>,   <span class="comment">#  黑色</span></span><br><span class="line">            <span class="string">'red'</span>      : <span class="number">31</span>,   <span class="comment">#  红色</span></span><br><span class="line">            <span class="string">'green'</span>    : <span class="number">32</span>,   <span class="comment">#  绿色</span></span><br><span class="line">            <span class="string">'yellow'</span>   : <span class="number">33</span>,   <span class="comment">#  黄色</span></span><br><span class="line">            <span class="string">'blue'</span>     : <span class="number">34</span>,   <span class="comment">#  蓝色</span></span><br><span class="line">            <span class="string">'purple'</span>   : <span class="number">35</span>,   <span class="comment">#  紫红色</span></span><br><span class="line">            <span class="string">'cyan'</span>     : <span class="number">36</span>,   <span class="comment">#  青蓝色</span></span><br><span class="line">            <span class="string">'white'</span>    : <span class="number">37</span>,   <span class="comment">#  白色</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">'back'</span> :</span><br><span class="line">        &#123;   <span class="comment"># 背景</span></span><br><span class="line">            <span class="string">'black'</span>     : <span class="number">40</span>,  <span class="comment">#  黑色</span></span><br><span class="line">            <span class="string">'red'</span>       : <span class="number">41</span>,  <span class="comment">#  红色</span></span><br><span class="line">            <span class="string">'green'</span>     : <span class="number">42</span>,  <span class="comment">#  绿色</span></span><br><span class="line">            <span class="string">'yellow'</span>    : <span class="number">43</span>,  <span class="comment">#  黄色</span></span><br><span class="line">            <span class="string">'blue'</span>      : <span class="number">44</span>,  <span class="comment">#  蓝色</span></span><br><span class="line">            <span class="string">'purple'</span>    : <span class="number">45</span>,  <span class="comment">#  紫红色</span></span><br><span class="line">            <span class="string">'cyan'</span>      : <span class="number">46</span>,  <span class="comment">#  青蓝色</span></span><br><span class="line">            <span class="string">'white'</span>     : <span class="number">47</span>,  <span class="comment">#  白色</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">'mode'</span> :</span><br><span class="line">        &#123;   <span class="comment"># 显示模式</span></span><br><span class="line">            <span class="string">'mormal'</span>    : <span class="number">0</span>,   <span class="comment">#  终端默认设置</span></span><br><span class="line">            <span class="string">'bold'</span>      : <span class="number">1</span>,   <span class="comment">#  高亮显示</span></span><br><span class="line">            <span class="string">'underline'</span> : <span class="number">4</span>,   <span class="comment">#  使用下划线</span></span><br><span class="line">            <span class="string">'blink'</span>     : <span class="number">5</span>,   <span class="comment">#  闪烁</span></span><br><span class="line">            <span class="string">'invert'</span>    : <span class="number">7</span>,   <span class="comment">#  反白显示</span></span><br><span class="line">            <span class="string">'hide'</span>      : <span class="number">8</span>,   <span class="comment">#  不可见</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">'default'</span> :</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'end'</span> : <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UseStyle</span><span class="params">(string, mode = <span class="string">''</span>, fore = <span class="string">''</span>, back = <span class="string">''</span>)</span>:</span></span><br><span class="line">    mode  = <span class="string">'%s'</span> % STYLE[<span class="string">'mode'</span>][mode] <span class="keyword">if</span> STYLE[<span class="string">'mode'</span>].has_key(mode) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    fore  = <span class="string">'%s'</span> % STYLE[<span class="string">'fore'</span>][fore] <span class="keyword">if</span> STYLE[<span class="string">'fore'</span>].has_key(fore) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    back  = <span class="string">'%s'</span> % STYLE[<span class="string">'back'</span>][back] <span class="keyword">if</span> STYLE[<span class="string">'back'</span>].has_key(back) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    style = <span class="string">';'</span>.join([s <span class="keyword">for</span> s <span class="keyword">in</span> [mode, fore, back] <span class="keyword">if</span> s])</span><br><span class="line">    style = <span class="string">'\033[%sm'</span> % style <span class="keyword">if</span> style <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    end   = <span class="string">'\033[%sm'</span> % STYLE[<span class="string">'default'</span>][<span class="string">'end'</span>] <span class="keyword">if</span> style <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s%s%s'</span> % (style, string, end)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestColor</span><span class="params">( )</span>:</span></span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'正常显示'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"测试显示模式"</span></span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'高亮'</span>,   mode = <span class="string">'bold'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'下划线'</span>, mode = <span class="string">'underline'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'闪烁'</span>,   mode = <span class="string">'blink'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'反白'</span>,   mode = <span class="string">'invert'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'不可见'</span>, mode = <span class="string">'hide'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"测试前景色"</span></span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'黑色'</span>,   fore = <span class="string">'black'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'红色'</span>,   fore = <span class="string">'red'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'绿色'</span>,   fore = <span class="string">'green'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'黄色'</span>,   fore = <span class="string">'yellow'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'蓝色'</span>,   fore = <span class="string">'blue'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'紫红色'</span>, fore = <span class="string">'purple'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'青蓝色'</span>, fore = <span class="string">'cyan'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'白色'</span>,   fore = <span class="string">'white'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"测试背景色"</span></span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'黑色'</span>,   back = <span class="string">'black'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'红色'</span>,   back = <span class="string">'red'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'绿色'</span>,   back = <span class="string">'green'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'黄色'</span>,   back = <span class="string">'yellow'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'蓝色'</span>,   back = <span class="string">'blue'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'紫红色'</span>, back = <span class="string">'purple'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'青蓝色'</span>, back = <span class="string">'cyan'</span>),</span><br><span class="line">    <span class="keyword">print</span> UseStyle(<span class="string">'白色'</span>,   back = <span class="string">'white'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    TestColor()</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/07/20180807093621/20180807095325.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;线上经常执行脚本时需要根据各种情况把输出内容按照颜色进行区分,效果如上,代码如下&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.arunyang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.arunyang.com/tags/Python/"/>
    
      <category term="Shell" scheme="http://www.arunyang.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>js系列之数据常用方法详解</title>
    <link href="http://www.arunyang.com/2018/08/05/20180805063755/"/>
    <id>http://www.arunyang.com/2018/08/05/20180805063755/</id>
    <published>2018-08-04T22:27:55.000Z</published>
    <updated>2018-08-07T02:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/05/20180805063755/001.png" style="border:none;"></p><hr><h3 id="1-1-1-reduce方法"><a href="#1-1-1-reduce方法" class="headerlink" title="1.1.1 reduce方法"></a>1.1.1 reduce方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">/*求和*/</span></span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*求积*/</span></span><br><span class="line"><span class="keyword">var</span> product = a.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x*y,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(product);</span><br><span class="line"><span class="comment">/*求最大值*/</span></span><br><span class="line"><span class="keyword">var</span> max = a.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>(x&gt;y)?x:y);</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/05/20180805063755/001.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;1-1-1-reduce方法&quot;&gt;&lt;a href=&quot;#1-1-1-reduce方法&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 reduce方法&quot;&gt;&lt;/a&gt;1.1.1 reduce方法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*求和*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = a.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;x+y,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*求积*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; product = a.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;x*y,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*求最大值*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; max = a.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;(x&amp;gt;y)?x:y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(max);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>001课件1_1-2.高阶函数</title>
    <link href="http://www.arunyang.com/2018/06/17/20180617215926/"/>
    <id>http://www.arunyang.com/2018/06/17/20180617215926/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-07-14T16:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><div class="note info"><p>这是一个测试</p></div><h2 id="1-1开篇"><a href="#1-1开篇" class="headerlink" title="1.1开篇"></a>1.1开篇</h2><p><img src="/2018/06/17/20180617215926/001.png" style="border:none;"></p><hr><h3 id="1-1-1-编辑器"><a href="#1-1-1-编辑器" class="headerlink" title="1.1.1 编辑器"></a>1.1.1 编辑器</h3><ul><li><p>vscode webstorm </p></li><li><p>code runner (可以片段运行代码)</p></li></ul><h3 id="1-1-2-es6"><a href="#1-1-2-es6" class="headerlink" title="1.1.2 es6"></a>1.1.2 es6</h3><h3 id="1-1-1-1-异步的发展流程"><a href="#1-1-1-1-异步的发展流程" class="headerlink" title="1.1.1.1 异步的发展流程"></a>1.1.1.1 异步的发展流程</h3><h4 id="1-1-1-1-异步和同步的区别"><a href="#1-1-1-1-异步和同步的区别" class="headerlink" title="1.1.1.1 异步和同步的区别"></a>1.1.1.1 异步和同步的区别</h4><ul><li><p>异步(setTimeout ajax 事件)和同步的区别:</p><p>同步表示连续执行，异步表示非连续执行</p></li></ul><h4 id="1-1-1-2-回调函数的两种表现形式"><a href="#1-1-1-2-回调函数的两种表现形式" class="headerlink" title="1.1.1.2 回调函数的两种表现形式"></a>1.1.1.2 回调函数的两种表现形式</h4><ul><li><p>回调函数 函数(封装，私有化),即以下两种方式:</p><p>(1)高阶函数,一个函数执行后返回一个函数(2)函数可以当作参数传递给另一个函数</p></li></ul><a id="more"></a><h2 id="2-1柯里化"><a href="#2-1柯里化" class="headerlink" title="2.1柯里化"></a>2.1柯里化</h2><h3 id="2-1-1-柯里化和偏函数的解释"><a href="#2-1-1-柯里化和偏函数的解释" class="headerlink" title="2.1.1 柯里化和偏函数的解释"></a>2.1.1 柯里化和偏函数的解释</h3><blockquote><p>即:函数返回函数 ==别的叫法==&gt; 柯里化 偏函数…</p></blockquote><h3 id="2-1-2-判断内容的类型"><a href="#2-1-2-判断内容的类型" class="headerlink" title="2.1.2 判断内容的类型"></a>2.1.2 判断内容的类型</h3><p>// 判断内容的类型</p><p>// Object.prototype.toString.call(‘aaa’) = ‘[object Null]’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断类型 有四种 constructor typeof instanceof Object.prototype.toString</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">content,Type</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">Object</span>.prototype.toString.call(content).replace(<span class="regexp">/\[object\s|\]/g</span>,<span class="string">''</span>); <span class="comment">//String</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Type === str;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = isType(<span class="string">'hello'</span>,<span class="string">'String'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//输出:true</span></span><br></pre></td></tr></table></figure><blockquote><p>优化,类回调函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function isType(type) &#123;</span><br><span class="line"></span><br><span class="line">  return function (content) &#123;</span><br><span class="line"></span><br><span class="line">    let str = Object.prototype.toString.call(content).replace(/\[object\s|\]/g, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">    return type === str;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let util = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let type = [&apos;String&apos;,&apos;Object&apos;,&apos;Null&apos;,&apos;Function&apos;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type.forEach((item)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">  util[&apos;is&apos;+item] = isType(item);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(util);</span><br><span class="line"></span><br><span class="line">console.log(util.isString(&apos;hello&apos;));</span><br><span class="line"></span><br><span class="line">console.log(util.isObject(&apos;Object&apos;));</span><br><span class="line"></span><br><span class="line">console.log(util.isNull(&apos;Null&apos;));</span><br><span class="line"></span><br><span class="line">console.log(util.isFunction(&apos;Function&apos;));</span><br><span class="line"></span><br><span class="line">/*输出=&gt;</span><br><span class="line"></span><br><span class="line">&#123; isString: [Function],</span><br><span class="line"></span><br><span class="line">  isObject: [Function],</span><br><span class="line"></span><br><span class="line">  isNull: [Function],</span><br><span class="line"></span><br><span class="line">  isFunction: [Function] &#125;</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="3-1-回调函数底层原理"><a href="#3-1-回调函数底层原理" class="headerlink" title="3.1 回调函数底层原理"></a>3.1 回调函数底层原理</h2><blockquote><p>回调函数(不一定是异步的)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 预置参数 lodash after</span><br><span class="line"></span><br><span class="line">function after(times,callback) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&apos;111****:&apos;+times);</span><br><span class="line"></span><br><span class="line">  return function () &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;222+++:&apos;+times);</span><br><span class="line"></span><br><span class="line">    if(--times === 0)&#123;</span><br><span class="line"></span><br><span class="line">      console.log(&apos;333====:&apos;+times);</span><br><span class="line"></span><br><span class="line">      callback()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let eat = after(3,function () &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&apos;吃完了&apos;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">eat();</span><br><span class="line"></span><br><span class="line">eat();</span><br><span class="line"></span><br><span class="line">eat();</span><br><span class="line"></span><br><span class="line">/*输出=&gt;</span><br><span class="line"></span><br><span class="line">111****:3</span><br><span class="line"></span><br><span class="line">222+++:3</span><br><span class="line"></span><br><span class="line">222+++:2</span><br><span class="line"></span><br><span class="line">222+++:1</span><br><span class="line"></span><br><span class="line">333====:0</span><br><span class="line"></span><br><span class="line">吃完了</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line"></span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line"></span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line"></span><br><span class="line">/*输出=&gt;</span><br><span class="line"></span><br><span class="line">111****:3</span><br><span class="line"></span><br><span class="line">222+++:3</span><br><span class="line"></span><br><span class="line">111****:3</span><br><span class="line"></span><br><span class="line">222+++:3</span><br><span class="line"></span><br><span class="line">111****:3</span><br><span class="line"></span><br><span class="line">222+++:3</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="3-1-1-回调函数的缺点"><a href="#3-1-1-回调函数的缺点" class="headerlink" title="3.1.1 回调函数的缺点"></a>3.1.1 回调函数的缺点</h3><blockquote><p>1) 异步方法如果出错了不能捕获try/catch错误</p></blockquote><blockquote><p>2) 获取的结果不能通过return返回</p></blockquote><blockquote><p>3) 回调函数可能会产生 (回调地狱)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//cat 1.txt =&gt; 模板</span><br><span class="line"></span><br><span class="line">//cat 2.txt =&gt; 数据</span><br><span class="line"></span><br><span class="line">// 我们可以引用一个模块 操作文件</span><br><span class="line"></span><br><span class="line">let fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">// 相当于两个异步请求 有关系 关系是第二个请求 是依赖于第一个的</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;./1.txt&apos;, &apos;utf8&apos;, function (err, a) &#123; // error-first</span><br><span class="line"></span><br><span class="line">    fs.readFile(&apos;./2.txt&apos;, &apos;utf8&apos;, function (err, b) &#123; // error-first</span><br><span class="line"></span><br><span class="line">        console.log(a, b)</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*输出=&gt;</span><br><span class="line"></span><br><span class="line">模板 数据</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="3-1-2-同时两个异步请求问题的规避"><a href="#3-1-2-同时两个异步请求问题的规避" class="headerlink" title="3.1.2 同时两个异步请求问题的规避"></a>3.1.2 同时两个异步请求问题的规避</h3><blockquote><p>两个异步请求 同时拿到两个异步请求的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params">times,callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// args = [1,2,3]</span></span><br><span class="line"></span><br><span class="line">        arr.push(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(--times === <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            callback(arr);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> out = after(<span class="number">2</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, a</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    out(a);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./2.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    out(b);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ '模板', '数据' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3-回调函数及发布订阅原理代码演示"><a href="#3-1-3-回调函数及发布订阅原理代码演示" class="headerlink" title="3.1.3 回调函数及发布订阅原理代码演示"></a>3.1.3 回调函数及发布订阅原理代码演示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布(这件事发生时 我要依次执行) 订阅(我预先想到的事)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> events = &#123;</span><br><span class="line"></span><br><span class="line">  cbs:[],</span><br><span class="line"></span><br><span class="line">  results:[],</span><br><span class="line"></span><br><span class="line">  on(cb)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.cbs.push(cb);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  emit(data)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.results.push(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.cbs.forEach(fn =&gt; fn(this.results))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.cbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fn(<span class="keyword">this</span>.results); <span class="comment">//这种方式是箭头函数的简写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// fn(this.results);</span></span><br><span class="line"></span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 订阅的过程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// if(data.length === 2)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 订阅的过程</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(data+<span class="string">' =&gt; 很棒'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, a</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   events.emit(a);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./2.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  events.emit(b);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出=&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ '模板' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">模板 =&gt; 很棒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ '模板', '数据' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">模板,数据 =&gt; 很棒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这是一个测试&lt;/p&gt;&lt;/div&gt;
&lt;h2 id=&quot;1-1开篇&quot;&gt;&lt;a href=&quot;#1-1开篇&quot; class=&quot;headerlink&quot; title=&quot;1.1开篇&quot;&gt;&lt;/a&gt;1.1开篇&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/06/17/20180617215926/001.png&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;1-1-1-编辑器&quot;&gt;&lt;a href=&quot;#1-1-1-编辑器&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 编辑器&quot;&gt;&lt;/a&gt;1.1.1 编辑器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vscode webstorm &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;code runner (可以片段运行代码)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-1-2-es6&quot;&gt;&lt;a href=&quot;#1-1-2-es6&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 es6&quot;&gt;&lt;/a&gt;1.1.2 es6&lt;/h3&gt;&lt;h3 id=&quot;1-1-1-1-异步的发展流程&quot;&gt;&lt;a href=&quot;#1-1-1-1-异步的发展流程&quot; class=&quot;headerlink&quot; title=&quot;1.1.1.1 异步的发展流程&quot;&gt;&lt;/a&gt;1.1.1.1 异步的发展流程&lt;/h3&gt;&lt;h4 id=&quot;1-1-1-1-异步和同步的区别&quot;&gt;&lt;a href=&quot;#1-1-1-1-异步和同步的区别&quot; class=&quot;headerlink&quot; title=&quot;1.1.1.1 异步和同步的区别&quot;&gt;&lt;/a&gt;1.1.1.1 异步和同步的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异步(setTimeout ajax 事件)和同步的区别:&lt;/p&gt;
&lt;p&gt;同步表示连续执行，异步表示非连续执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-1-2-回调函数的两种表现形式&quot;&gt;&lt;a href=&quot;#1-1-1-2-回调函数的两种表现形式&quot; class=&quot;headerlink&quot; title=&quot;1.1.1.2 回调函数的两种表现形式&quot;&gt;&lt;/a&gt;1.1.1.2 回调函数的两种表现形式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;回调函数 函数(封装，私有化),即以下两种方式:&lt;/p&gt;
&lt;p&gt;(1)高阶函数,一个函数执行后返回一个函数(2)函数可以当作参数传递给另一个函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.arunyang.com/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://www.arunyang.com/tags/NodeJS/"/>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>fs</title>
    <link href="http://www.arunyang.com/2018/06/17/008%E8%AF%BE%E4%BB%B68fs/"/>
    <id>http://www.arunyang.com/2018/06/17/008课件8fs/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-07-14T09:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>#fs模块</p><p>##1.1</p><p>###1.1.1 readFile函数</p><blockquote><p><a href="http://nodejs.cn/api/fs.html#fs_fs_readfile_path_options_callback" target="_blank" rel="noopener">readFile官网文档</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt</span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>cat 1.reaFile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//是把整个文件作为一个整体</span></span><br><span class="line">fs.readFile(<span class="string">'../1.txt'</span>,&#123;<span class="attr">encoding</span>:<span class="string">'utf8'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);<span class="comment">//输出=&gt; 1234567890</span></span><br><span class="line"><span class="built_in">console</span>.log(data);<span class="comment">//输出=&gt; null</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步方法是没有回调函数的</span></span><br><span class="line"><span class="keyword">let</span> result=fs.readFileSync(<span class="string">'../1.txt'</span>,&#123;<span class="attr">encoding</span>: <span class="string">'utf8'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出=&gt; 1234567890</span></span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="1-1-2-readFile函数"><a href="#1-1-2-readFile函数" class="headerlink" title="1.1.2 readFile函数"></a>1.1.2 readFile函数</h3><blockquote><p><a href="http://nodejs.cn/api/fs.html#fs_fs_writefile_file_data_options_callback" target="_blank" rel="noopener">readFile官网文档</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//异步方法</span></span><br><span class="line">fs.writeFile(<span class="string">'./2.txt'</span>,<span class="string">'this is a test'</span>,&#123;<span class="attr">encoding</span>: <span class="string">'utf8'</span>&#125;,(err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'write OK'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line">fs.writeFileSync(<span class="string">'./3.txt'</span>,<span class="string">'this is an example!!'</span>);</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat ./2.txt</span><br><span class="line">this is a test</span><br><span class="line">cat ./3.txt</span><br><span class="line">this is an example!!</span><br></pre></td></tr></table></figure><h3 id="1-1-3-copy函数实现"><a href="#1-1-3-copy函数实现" class="headerlink" title="1.1.3 copy函数实现"></a>1.1.3 copy函数实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src,dest,cb</span>) </span>&#123;</span><br><span class="line">fs.readFile(src,(err,data) =&gt; &#123;</span><br><span class="line">fs.writeFile(dest,data,cb);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">copy(<span class="string">'../3.txt'</span>,<span class="string">'../4.txt'</span>,() =&gt; &#123;  <span class="comment">//直接清空4.txt内容然后覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'拷贝完成'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>执行效果</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat 3.txt</span><br><span class="line">456</span><br><span class="line">cat 4.txt</span><br><span class="line">456</span><br></pre></td></tr></table></figure></p><h3 id="1-1-4-向文件中追加内容的两种方式"><a href="#1-1-4-向文件中追加内容的两种方式" class="headerlink" title="1.1.4 向文件中追加内容的两种方式"></a>1.1.4 向文件中追加内容的两种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//&lt;1&gt;第一种向文件中追加内容方式</span></span><br><span class="line"><span class="comment">//writeFile flags=w 写入，如果文件已经存在，则删除掉文件后再写入</span></span><br><span class="line">fs.writeFile(<span class="string">'./4.txt'</span>,<span class="string">'789'</span>,&#123;<span class="attr">flag</span>:<span class="string">'a'</span>&#125;);   <span class="comment">//打开文件用于追加。如果文件不存在则创建文件</span></span><br><span class="line"><span class="comment">//&lt;2&gt;第二种向文件中追加内容方式</span></span><br><span class="line">fs.appendFile(<span class="string">'./4.txt'</span>,<span class="string">'789'</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-5-open函数的fd文件描述符"><a href="#1-1-5-open函数的fd文件描述符" class="headerlink" title="1.1.5 open函数的fd文件描述符"></a>1.1.5 open函数的fd文件描述符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//fd file descriptor 文件描述符 是一个数字或者说索引</span></span><br><span class="line">fs.open(<span class="string">'../5.txt'</span>,<span class="string">'r'</span>,(err,fd) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(fd);  <span class="comment">//输出=&gt; 11</span></span><br><span class="line">fs.open(<span class="string">'../4.txt'</span>,<span class="string">'r'</span>,(err,fd) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(fd); <span class="comment">//输出=&gt; 12</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-1-6-fs-open的buffer方式读取"><a href="#1-1-6-fs-open的buffer方式读取" class="headerlink" title="1.1.6 fs.open的buffer方式读取"></a>1.1.6 fs.open的buffer方式读取</h3><blockquote><p>fs.read几个参数详解<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat 6.txt</span><br><span class="line">饿了么外卖还行实验下</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//1.文件太大，不能整个放到内存里边</span></span><br><span class="line"><span class="comment">//2.文件大小未知</span></span><br><span class="line">fs.open(<span class="string">'../6.txt'</span>,<span class="string">'r'</span>,<span class="number">0666</span>,(err,fd) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> buffer=Buffer.alloc(<span class="number">12</span>);<span class="comment">//[0,1,2,3,4,5] 只能容下3个字</span></span><br><span class="line">fs.read(fd,buffer,<span class="number">0</span>,<span class="number">12</span>,<span class="number">9</span>,(err,bytesRead) =&gt; &#123;  <span class="comment">//length读取的字节不够的话剩下的会乱码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.从 fd 指定的文件中读取数据。</span></span><br><span class="line"><span class="comment">2.buffer 是数据将被写入到的 buffer。</span></span><br><span class="line"><span class="comment">3.offset 是 buffer 中开始写入的偏移量。</span></span><br><span class="line"><span class="comment">4.length 是一个整数，指定要读取的字节数。</span></span><br><span class="line"><span class="comment">        5.position 指定从文件中开始读取的位置。 如果 position 为 null，</span></span><br><span class="line"><span class="comment">        则数据从当前文件读取位置开始读取，且文件读取位置会被更新。 如果 position 为一个整数，则文件读取位置保持不变。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(buffer.toString()); <span class="comment">//输出=&gt; 外卖还行</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>进一步解释:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.open(<span class="string">'../6.txt'</span>,<span class="string">'r'</span>,<span class="number">0666</span>,(err,fd) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> buffer=Buffer.alloc(<span class="number">12</span>);<span class="comment">//读取4个字的长度</span></span><br><span class="line">    <span class="comment">//从第3个字节开始读,即从"了"开始读,读取一个字</span></span><br><span class="line">    fs.read(fd,buffer,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,(err,bytesRead) =&gt; &#123;  <span class="comment">//读取"外卖"</span></span><br><span class="line">        <span class="comment">//从第6个字节开始读,即从"么"开始读,读取一个字,并向后移动一个字,即3字节</span></span><br><span class="line">        fs.read(fd,buffer,<span class="number">6</span>,<span class="number">6</span>,<span class="number">15</span>,(err,byteRead) =&gt; &#123;  <span class="comment">//在buffer中偏移"外卖"2个字6字节的长度,从"还行"15字节出开始读2个字的长度</span></span><br><span class="line">            <span class="built_in">console</span>.log(buffer.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-7-fs的write-fsync-close用法举例"><a href="#1-1-7-fs的write-fsync-close用法举例" class="headerlink" title="1.1.7 fs的write/fsync/close用法举例"></a>1.1.7 fs的write/fsync/close用法举例</h3><blockquote><p>cat ../6.txt<br>饿了么外卖还行实验下<br>cat 7.write.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.open(<span class="string">'../6.txt'</span>,<span class="string">'r+'</span>,<span class="number">0666</span>,(err,fd) =&gt; &#123;</span><br><span class="line">    <span class="comment">// let buffer=Buffer.alloc(12);</span></span><br><span class="line"><span class="keyword">let</span> buffer=Buffer.from(<span class="string">'饿了么好'</span>);<span class="comment">//[0,1,2,3,4,5,6,7,8,9,10,11]</span></span><br><span class="line"><span class="comment">//fd buffer offset</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1-2.写入 buffer 到 fd 指定的文件。</span></span><br><span class="line"><span class="comment">    3.offset 决定 buffer 中被写入的部分。</span></span><br><span class="line"><span class="comment">    4.length 是一个整数，指定要写入的字节数。</span></span><br><span class="line"><span class="comment">    5.position 指向从文件开始写入数据的位置的偏移量。</span></span><br><span class="line"><span class="comment">    如果 typeof position !== 'number'，则数据从当前位置写入。详见 pwrite(2)。</span></span><br><span class="line"><span class="comment">    6.回调有三个参数 (err, bytesWritten, buffer)，其中 bytesWritten 指定从 buffer 写入了多少字节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fs.write(fd,buffer,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,(err,bytesWritten) =&gt; &#123;</span><br><span class="line"><span class="comment">// console.log(err);  //没有错误,输出=&gt; null</span></span><br><span class="line"><span class="built_in">console</span>.log(bytesWritten);  <span class="comment">//这里的"bytesWritten"为length,即6(指定从 buffer 写入了多少字节)</span></span><br><span class="line">fs.fsync(fd,(err) =&gt; &#123;  <span class="comment">//fsync从内存刷新到磁盘</span></span><br><span class="line">fs.close(fd,(err) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'关闭文件'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let a=10;   //10进制</span></span><br><span class="line"><span class="comment">let b=0x10; //16进制</span></span><br><span class="line"><span class="comment">let c=011;  //8进制</span></span><br><span class="line"><span class="comment">let d=0b11; //2进制</span></span><br><span class="line"><span class="comment">console.log(c); //输出=&gt; 9</span></span><br><span class="line"><span class="comment">console.log(d); //输出=&gt; 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-8"><a href="#1-1-8" class="headerlink" title="1.1.8"></a>1.1.8</h3><blockquote><p>cat ../6.txt || 7.txt<br>饿了么外卖还行实验下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> BUFFER_SIZE=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//src 5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src,dest</span>) </span>&#123;</span><br><span class="line">fs.open(src,<span class="string">'r'</span>,(err,readFd)=&gt; &#123;</span><br><span class="line">fs.open(dest,<span class="string">'w'</span>,(err,writeFd) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> buffer=Buffer.alloc(BUFFER_SIZE);</span><br><span class="line"><span class="keyword">let</span> readed=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> writed=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">fs.read(readFd,buffer,<span class="number">0</span>,BUFFER_SIZE,readed,(err,bytesRead) =&gt; &#123;</span><br><span class="line">readed+=bytesRead;</span><br><span class="line">bytesRead&amp;&amp;fs.write(writeFd,buffer,<span class="number">0</span>,bytesRead,writed,(err,bytesWritten) =&gt; &#123;</span><br><span class="line">writed+=bytesWritten;</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">copy(<span class="string">'../6.txt'</span>,<span class="string">'7.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">err,bytesRead,flag</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">    flag&amp;&amp;<span class="built_in">console</span>.log(bytesRead);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="string">"err"</span>,<span class="number">12</span>, <span class="literal">true</span>)<span class="comment">//输出=&gt; err12</span></span><br><span class="line"><span class="comment">//f("err",12)  //输出=&gt; err</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-9-mkdir命令实现"><a href="#1-1-9-mkdir命令实现" class="headerlink" title="1.1.9 mkdir命令实现"></a>1.1.9 mkdir命令实现</h3><blockquote><p>cat 9.mkdir.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//如何创建一个目录,创建目录的时候要求父目录必须存在,即这里的a/b目录必须存在</span></span><br><span class="line">fs.mkdir(<span class="string">'./a/b/c'</span>,err =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'创建成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个文件是否存在</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fs.access('./7.tx',(err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">console.log(err);</span></span><br><span class="line"><span class="comment">//&#123; [Error: ENOENT: no such file or directory, access './7.tx']</span></span><br><span class="line"><span class="comment">    // errno: -2, code: 'ENOENT', syscall: 'access', path: './7.tx' &#125;</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-10-执行一个函数"><a href="#1-1-10-执行一个函数" class="headerlink" title="1.1.10 执行一个函数"></a>1.1.10 执行一个函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123; <span class="comment">//~和!都可</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="1-1-11-call和apply的区别"><a href="#1-1-11-call和apply的区别" class="headerlink" title="1.1.11 call和apply的区别"></a>1.1.11 call和apply的区别</h3><blockquote><p>如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(this);   //打印全局global</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>);      <span class="comment">//参数</span></span><br><span class="line">fn.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//参数为数组</span></span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-12-apply-和-call-的用法"><a href="#1-1-12-apply-和-call-的用法" class="headerlink" title="1.1.12 apply 和 call 的用法"></a>1.1.12 apply 和 call 的用法</h3><p><a href="https://github.com/lin-xin/blog/issues/7" target="_blank" rel="noopener">参考</a></p><h4 id="1-1-12-1-改变-this-指向"><a href="#1-1-12-1-改变-this-指向" class="headerlink" title="1.1.12.1 改变 this 指向"></a>1.1.12.1 改变 this 指向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">func.call(obj);       <span class="comment">//输出=&gt;linxin</span></span><br></pre></td></tr></table></figure><blockquote><p>我们知道，call 方法的第一个参数是作为函数上下文的对象，这里把 obj 作为参数传给了 func，此时函数里的 this 便指向了 obj 对象。此处 func 函数里其实相当于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="1-1-12-2-借用别的对象的方法"><a href="#1-1-12-2-借用别的对象的方法" class="headerlink" title="1.1.12.2 借用别的对象的方法"></a>1.1.12.2 借用别的对象的方法</h4><blockquote><p>从下面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2 就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person1  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'linxin'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.getname = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    Person1.call(<span class="keyword">this</span>);  <span class="comment">//相当于类的继承extends,使用 Person1 对象代替 this 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person2();</span><br><span class="line">person.getname();     </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Person2 &#123;&#125;</span></span><br><span class="line"><span class="comment">Person2 &#123; getname: [Function], name: 'linxin' &#125;</span></span><br><span class="line"><span class="comment">linxin</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-13-call-和-bind-的区别"><a href="#1-1-13-call-和-bind-的区别" class="headerlink" title="1.1.13 call 和 bind 的区别"></a>1.1.13 call 和 bind 的区别</h3><blockquote><p>在 EcmaScript5 中扩展了叫 bind 的方法，在低版本的 IE 中不兼容。它和 call 很相似，接受的参数有两部分，第一个参数是是作为函数上下文的对象，第二部分参数是个列表，可以接受多个参数。<br>它们之间的区别有以下两点。</p></blockquote><h4 id="1-1-13-1-调用函数"><a href="#1-1-13-1-调用函数" class="headerlink" title="1.1.13.1 调用函数"></a>1.1.13.1 调用函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = func.bind(obj);</span><br><span class="line">func1();    <span class="comment">//输出=&gt; linxin</span></span><br></pre></td></tr></table></figure><p><strong>bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 func 中的 this 并没有被改变，依旧指向全局对象 window。</strong></p><h4 id="1-1-13-2-调用函数"><a href="#1-1-13-2-调用函数" class="headerlink" title="1.1.13.2 调用函数"></a>1.1.13.2 调用函数</h4><blockquote><p>call 是把第二个及以后的参数作为 func 方法的实参传进去，而 func1 方法的实参实则是在 bind 中参数的基础上再往后排。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func1 = func.bind(<span class="literal">null</span>,<span class="string">'linxin'</span>);</span><br><span class="line"></span><br><span class="line">func(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);            <span class="comment">// A B C</span></span><br><span class="line">func1(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);           <span class="comment">// linxin A B</span></span><br><span class="line">func1(<span class="string">'B'</span>, <span class="string">'C'</span>);                <span class="comment">// linxin B C</span></span><br><span class="line">func.call(<span class="literal">null</span>, <span class="string">'linxin'</span>);      <span class="comment">// linxin undefined undefined</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在低版本浏览器没有 bind 方法，我们也可以自己实现一个。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>,                        <span class="comment">// 保存原函数</span></span><br><span class="line">            context = [].shift.call(<span class="built_in">arguments</span>), <span class="comment">// 保存需要绑定的this上下文</span></span><br><span class="line">            args = [].slice.call(<span class="built_in">arguments</span>);    <span class="comment">// 剩余的参数转为数组</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                    <span class="comment">// 返回一个新函数</span></span><br><span class="line">            self.apply(context,[].concat.call(args, [].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([].slice.call(<span class="built_in">arguments</span>))</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);    <span class="comment">//输出=&gt; [ 1, 2, 3 ]</span></span><br><span class="line"><span class="keyword">let</span> test = f.bind(<span class="keyword">this</span>);</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//输出=&gt; [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;#fs模块&lt;/p&gt;
&lt;p&gt;##1.1&lt;/p&gt;
&lt;p&gt;###1.1.1 readFile函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/api/fs.html#fs_fs_readfile_path_options_callback&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;readFile官网文档&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat 1.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;cat 1.reaFile.js&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fs=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是把整个文件作为一个整体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;../1.txt&#39;&lt;/span&gt;,&amp;#123;&lt;span class=&quot;attr&quot;&gt;encoding&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);	&lt;span class=&quot;comment&quot;&gt;//输出=&amp;gt; 1234567890&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);	&lt;span class=&quot;comment&quot;&gt;//输出=&amp;gt; null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同步方法是没有回调函数的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result=fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&#39;../1.txt&#39;&lt;/span&gt;,&amp;#123;&lt;span class=&quot;attr&quot;&gt;encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);	&lt;span class=&quot;comment&quot;&gt;//输出=&amp;gt; 1234567890&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.arunyang.com/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://www.arunyang.com/tags/NodeJS/"/>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>node基础</title>
    <link href="http://www.arunyang.com/2018/06/17/004%E8%AF%BE%E4%BB%B61_3node%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.arunyang.com/2018/06/17/004课件1_3node基础/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-07-14T16:37:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>#</p><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h3 id="1-1-1多线程"><a href="#1-1-1多线程" class="headerlink" title="1.1.1多线程"></a>1.1.1多线程</h3><blockquote><p>多线程 单线程</p><ul><li>主线程是单线程的 (node其实也是多线程的 setTimeout线程 ajax)<br>浏览器 (线程 进程)</li><li>js线程</li><li>ui线程<br>一般情况下 ui线程 渲染后 空闲下来 会执行js<br><code>js线程和ui线程 是共享线程的( webworker 进程) 开一个工作者(归主线程来管理的，不能操作dom)</code><br><code>如果js是多线程的,不能同时两个线程 操作同一个DOM</code><br>异步 同步<br>阻塞和非阻塞<br>NODE<br><code>非阻塞异步io + 事件驱动</code><br>queue stack</li><li>queue队列 先进先出 push shift </li><li>stack栈  函数执行<a id="more"></a>ive-server / http-server/ zf-http-server</li><li>全局安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br><span class="line">http-server</span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="1-1-1-1-宏任务MutationObserve更新示例"><a href="#1-1-1-1-宏任务MutationObserve更新示例" class="headerlink" title="1.1.1.1 宏任务MutationObserve更新示例"></a>1.1.1.1 宏任务MutationObserve更新示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 废弃了 兼容有问题</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> observe = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'已经dom更新好了'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      observe.observe(app,&#123;<span class="attr">childList</span>:<span class="literal">true</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        app.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'span'</span>));</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下</strong><br><img src="/2018/06/17/004课件1_3node基础/Users/00arunalldata00/009_mystudy/012_mygithub_blog/itcomputer12.github.io/arunyang/source/_posts/20180623/002.png" alt="图002"><br><img src="/2018/06/17/004课件1_3node基础/Users/00arunalldata00/009_mystudy/012_mygithub_blog/itcomputer12.github.io/arunyang/source/_posts/20180623/003.png" alt="图003"></p><h4 id="1-1-1-2-h5内置函数同异步代码演示"><a href="#1-1-1-2-h5内置函数同异步代码演示" class="headerlink" title="1.1.1.2 h5内置函数同异步代码演示"></a>1.1.1.2 h5内置函数同异步代码演示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 宏任务 MutationObserve</span></span><br><span class="line">    <span class="keyword">let</span> messageChannel = <span class="keyword">new</span> MessageChannel(); <span class="comment">//h5内置</span></span><br><span class="line">    <span class="keyword">let</span> prot2 = messageChannel.port2;</span><br><span class="line">    <span class="comment">// postMessage是异步执行的 要等待同步都执行完后 才会被调用</span></span><br><span class="line">    messageChannel.port1.postMessage(<span class="string">'我爱你'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    prot2.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>浏览器Console输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">我爱你</span><br></pre></td></tr></table></figure></p><h4 id="1-1-2-1-多线程工作原理代码详解"><a href="#1-1-2-1-多线程工作原理代码详解" class="headerlink" title="1.1.2.1 多线程工作原理代码详解"></a>1.1.2.1 多线程工作原理代码详解</h4><blockquote><p>cat 1.webworker.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 多线程 可以开一个工作线程</span></span><br><span class="line">    <span class="comment">// 但是要归主线程所管理</span></span><br><span class="line">    <span class="comment">// websocket</span></span><br><span class="line">    <span class="keyword">let</span> worker  = <span class="keyword">new</span> Worker(<span class="string">'./1.worker.js'</span>);</span><br><span class="line">    worker.postMessage(<span class="number">10000</span>);</span><br><span class="line">    worker.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'main thread'</span>)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>浏览器Console输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main thread</span><br><span class="line">49995000</span><br></pre></td></tr></table></figure></p><blockquote><p>cat 1.worker.js 写完后通过消息发送给另一个线程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r = e.data;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  postMessage(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="1-1-2-2-主线程栈调用顺序"><a href="#1-1-2-2-主线程栈调用顺序" class="headerlink" title="1.1.2.2 主线程栈调用顺序"></a>1.1.2.2 主线程栈调用顺序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    three();</span><br><span class="line">  &#125;</span><br><span class="line">  two();</span><br><span class="line">&#125;</span><br><span class="line">one();<span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-2-放入回调队列顺序的代码演示"><a href="#1-1-2-2-放入回调队列顺序的代码演示" class="headerlink" title="1.1.2.2 放入回调队列顺序的代码演示"></a>1.1.2.2 放入回调队列顺序的代码演示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码执行后 才会执行异步</span></span><br><span class="line"><span class="comment">// 根据时间排序 当时间到达后 把对应的回调 放到队列里</span></span><br><span class="line"><span class="comment">// 宏任务 微任务(vue $nextTick) 异步方法</span></span><br><span class="line"><span class="comment">// setImmedate只兼容ie </span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);  <span class="comment">//这个比2后放入callback queue的</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-3-微任务和宏任务执行顺序"><a href="#1-1-2-3-微任务和宏任务执行顺序" class="headerlink" title="1.1.2.3 微任务和宏任务执行顺序"></a>1.1.2.3 微任务和宏任务执行顺序</h4><blockquote><p>Promise中的then方法是微任务 会在宏任务之前执行<br>cat Promise.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Promise中的then方法是微任务 会在宏任务之前执行</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">      resolve();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;   <span class="comment">//宏任务</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;, 0);</span></span><br><span class="line"><span class="javascript">    p.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;<span class="comment">//微任务</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>浏览器Console输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure></p><blockquote><p>setImmediate也是宏任务<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 默认是低于timeout 宏任务</span></span></span><br><span class="line"><span class="javascript">    setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//只有2B的微软有这个方法(宏任务)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;, 4);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出=&gt;</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">setImmediate</span></span><br><span class="line"><span class="comment">timeout</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="1-1-2-4-微任务和宏任务复杂场景比较执行顺序"><a href="#1-1-2-4-微任务和宏任务复杂场景比较执行顺序" class="headerlink" title="1.1.2.4 微任务和宏任务复杂场景比较执行顺序"></a>1.1.2.4 微任务和宏任务复杂场景比较执行顺序</h4><blockquote><p>cat timeout.js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log('setTimeout1')</span><br><span class="line">  Promise.resolve().then(data =&gt; &#123;</span><br><span class="line">    console.log('微任务1')</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, 0);</span><br><span class="line">Promise.resolve().then(data=&gt;&#123;</span><br><span class="line">  console.log('微任务2')</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log('setTimeout2')</span><br><span class="line">  &#125;, 0);</span><br><span class="line">&#125;);</span><br><span class="line">/*输出=&gt;输出顺序不一致</span><br><span class="line">微任务2</span><br><span class="line">setTimeout1</span><br><span class="line">微任务1 (不一定前后)</span><br><span class="line">setTimeout2 (不一定前后)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;#&lt;/p&gt;
&lt;h2 id=&quot;1-1&quot;&gt;&lt;a href=&quot;#1-1&quot; class=&quot;headerlink&quot; title=&quot;1.1&quot;&gt;&lt;/a&gt;1.1&lt;/h2&gt;&lt;h3 id=&quot;1-1-1多线程&quot;&gt;&lt;a href=&quot;#1-1-1多线程&quot; class=&quot;headerlink&quot; title=&quot;1.1.1多线程&quot;&gt;&lt;/a&gt;1.1.1多线程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;多线程 单线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主线程是单线程的 (node其实也是多线程的 setTimeout线程 ajax)&lt;br&gt;浏览器 (线程 进程)&lt;/li&gt;
&lt;li&gt;js线程&lt;/li&gt;
&lt;li&gt;ui线程&lt;br&gt;一般情况下 ui线程 渲染后 空闲下来 会执行js&lt;br&gt;&lt;code&gt;js线程和ui线程 是共享线程的( webworker 进程) 开一个工作者(归主线程来管理的，不能操作dom)&lt;/code&gt;&lt;br&gt;&lt;code&gt;如果js是多线程的,不能同时两个线程 操作同一个DOM&lt;/code&gt;&lt;br&gt;异步 同步&lt;br&gt;阻塞和非阻塞&lt;br&gt;NODE&lt;br&gt;&lt;code&gt;非阻塞异步io + 事件驱动&lt;/code&gt;&lt;br&gt;queue stack&lt;/li&gt;
&lt;li&gt;queue队列 先进先出 push shift &lt;/li&gt;
&lt;li&gt;stack栈  函数执行&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.arunyang.com/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://www.arunyang.com/tags/NodeJS/"/>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>02课件3_3-6.promise基础应用及链式写法和实现和promise其他用法</title>
    <link href="http://www.arunyang.com/2018/06/17/002%E8%AF%BE%E4%BB%B63_3-6.promise%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8%E5%8F%8A%E9%93%BE%E5%BC%8F%E5%86%99%E6%B3%95%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%92%8Cpromise%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95/"/>
    <id>http://www.arunyang.com/2018/06/17/002课件3_3-6.promise基础应用及链式写法和实现和promise其他用法/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-07-14T09:37:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-1实现promise"><a href="#1-1实现promise" class="headerlink" title="1.1实现promise"></a>1.1实现promise</h2><blockquote><p>Promises/A+规范官网<br><strong><a href="https://promisesaplus.com/" target="_blank" rel="noopener">https://promisesaplus.com/</a></strong></p></blockquote><h3 id="1-1-1-promise特性一"><a href="#1-1-1-promise特性一" class="headerlink" title="1.1.1 promise特性一"></a>1.1.1 promise特性一</h3><blockquote><p>promise会立即执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="1-1-2-promise特性二及几个状态"><a href="#1-1-2-promise特性二及几个状态" class="headerlink" title="1.1.2 promise特性二及几个状态"></a>1.1.2 promise特性二及几个状态</h3><blockquote><p>(1)promise 本意 承诺 三个状态 成功态 失败态 等待态<br>(2)默认是等待态 等待态可以变成 成功态/失败态<br>(3)成功就不能失败 也不能 从失败变成成功<br>(4)在低版本浏览器 不支持的 es6-promise<br>(5)executor是立即执行的<br>(6)每个promise实例都有一个then方法,参数是成功和失败，成功会有成功的值 失败<br>(7) 同一个promise可以多次then<br>// Promise是一个类<br>// new Promise时 会传递一个执行器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// resolve('hello'); //成功和错误只能执行一个</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">'错误'</span>);</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123; <span class="comment">//一个promise可以then多次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data'</span>,data);</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'err'</span>,err);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data'</span>,data);</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>,err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">err 错误 //等3秒再执行</span></span><br><span class="line"><span class="comment">err 错误</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-3-手写promise实现"><a href="#1-1-3-手写promise实现" class="headerlink" title="1.1.3 手写promise实现"></a>1.1.3 手写promise实现</h3><blockquote><p>代码同上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cat 3.promise.js</span></span><br><span class="line"><span class="comment">//1.实现基本的promise</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./Promise'</span>)</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'买'</span>);</span><br><span class="line">    <span class="comment">// reject('不买'); //成功和错误只能执行一个</span></span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data'</span>, data);</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data'</span>, data);</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现原生Promise<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="comment">// 默认的状态</span></span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">    <span class="comment">// 原因</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 成功存放的数组</span></span><br><span class="line">    <span class="keyword">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="comment">// 失败存放的数组</span></span><br><span class="line">    <span class="keyword">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="comment">// 默认让执行器执行</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'resolved'</span>; <span class="comment">// 成功了,只能是成功状态,不会执行失败的状态</span></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'rejected'</span>; <span class="comment">// 失败了,只能是失败状态,不会执行成功的状态</span></span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,reject);</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFufilled,onRejected)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">      onFufilled(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">      onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-4-手写promise实现之发布订阅模式"><a href="#1-1-4-手写promise实现之发布订阅模式" class="headerlink" title="1.1.4 手写promise实现之发布订阅模式"></a>1.1.4 手写promise实现之发布订阅模式</h3><blockquote><p>cat 1.同步promise.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span>  = <span class="built_in">require</span>(<span class="string">'./Promise'</span>)</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3"</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// resolve('买');</span></span><br><span class="line">    reject(<span class="string">'不买'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data'</span>, data);</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data'</span>, data);</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">00000</span></span><br><span class="line"><span class="comment">00000   //过1秒钟再执行下面的</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">err 不买</span></span><br><span class="line"><span class="comment">err 不买</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现<br>cat Promise.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="keyword">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'resolved'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());     <span class="comment">//调用成功的状态</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());   <span class="comment">//调用失败的状态</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,reject);</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFufilled,onRejected)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">      onFufilled(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">      onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;       <span class="comment">//发布订阅模式</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"00000"</span>);</span><br><span class="line">      <span class="keyword">this</span>.onResolvedCallbacks.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        onFufilled(<span class="keyword">this</span>.value);           <span class="comment">//一旦成功进入这个状态</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.onRejectedCallbacks.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason);          <span class="comment">//一旦失败进入这个状态</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure></p></blockquote><p>##1.2 原生promise</p><p>###1.2.1 promise解决回调地狱</p><blockquote><p>准备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#cat 1.txt</span><br><span class="line">2.txt</span><br><span class="line">#cat 2.txt</span><br><span class="line">数据</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代码详解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) 解决回调地狱</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// throw new Error('xxx');  //如果promise内部有错误,它也会走失败.</span></span><br><span class="line">    fs.readFile(path, encoding, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err); <span class="comment">//这里return加不加都行,一旦失败就不会成功了</span></span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 成功的回调 或者失败的回调执行后可以返回一个promise</span></span><br><span class="line"><span class="comment">// 会将这个promise的执行结果传递给下一次then中</span></span><br><span class="line"><span class="comment">// 如果返回一个普通的值 ，会将这个普通值传递到下一次then的成功的参数</span></span><br><span class="line">read(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);          <span class="comment">//输出=&gt;2.txt</span></span><br><span class="line">    <span class="keyword">return</span> read(data, <span class="string">'utf8'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);          <span class="comment">//输出=&gt; 数据</span></span><br><span class="line">    <span class="keyword">return</span> [data];</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);            <span class="comment">//输出=&gt; [ '数据' ],这里返回值为undefined,所以下一句输出undefined</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);            <span class="comment">//输出=&gt; undefined</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'xxx'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">// .then()</span></span><br><span class="line">    .then(<span class="literal">null</span>,err=&gt;&#123;             <span class="comment">//直接进入失败分支,不会走前面的null分支(什么都不执行)</span></span><br><span class="line">  <span class="built_in">console</span>.log(err);             <span class="comment">//打印错误行数,没有返回值即返回是undefined,undefined也是普通值,所以它认为也是成功</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>);           <span class="comment">//输出=&gt; 成功</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;                 <span class="comment">//一旦出错用这个捕获,它会找最近的,剩下的处理不了的都可以用catch来捕获</span></span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>输出=&gt;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2.txt</span><br><span class="line">数据</span><br><span class="line">[ '数据' ]</span><br><span class="line">undefined</span><br><span class="line">Error: xxx</span><br><span class="line">    at read.then.then.then.then.data (/Users/00arunalldata00/007_studycoding/008_everest/20180609/003/promise-public-6-9/1.case.js:25:9)</span><br><span class="line">成功</span><br></pre></td></tr></table></figure></p><blockquote><p> .then() 什么都不传使用catch捕获<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) 解决回调地狱</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// throw new Error('xxx');</span></span><br><span class="line">    fs.readFile(path, encoding, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> read(data, <span class="string">'utf8'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> [data];</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'xxx'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then()         <span class="comment">//什么都不传</span></span><br><span class="line">    <span class="comment">// .then(null,err=&gt;&#123;             //直接进入失败分支,不会走前面的null分支(什么都不执行)</span></span><br><span class="line">  <span class="comment">// console.log(err);             //打印错误行数,没有返回值即返回是undefined,undefined也是普通值,所以它认为也是成功</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>输出=&gt;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.txt</span><br><span class="line">数据</span><br><span class="line">[ '数据' ]</span><br><span class="line">undefined</span><br><span class="line">Error: xxx</span><br><span class="line">    at read.then.then.then.then.data (/Users/00arunalldata00/007_studycoding/008_everest/20180609/003/promise-public-6-9/1.case.js:23:9)</span><br></pre></td></tr></table></figure></p><p>###1.2.2 promise穿透</p><blockquote><p>穿透的几种简写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./Promise'</span>);</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功不写的时候 默认就是value =&gt; value</span></span><br><span class="line"><span class="comment">// 失败不写默认返回 err=&gt;&#123;throw err&#125;</span></span><br><span class="line">promise.then()</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="comment">// promise.then(function (data) &#123;return data&#125;)</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="comment">// promise.then(data =&gt; data)</span></span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err'</span>,err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出=&gt; hello</span></span><br></pre></td></tr></table></figure></p></blockquote><p>###1.2.3 promise A+测试规范<br><code>npm install  promises-aplus-tests -g</code> 全局安装<br>➜  promise-public-6-9 git:(master) ✗ <strong>promises-aplus-tests Promise.js</strong>    #执行是否符合promiseA+检测<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  The value is `1` with `Number.prototype` modified to have a `then` method</span><br><span class="line">    ✓ already-fulfilled</span><br><span class="line">    ✓ immediately-fulfilled</span><br><span class="line">    ✓ eventually-fulfilled</span><br><span class="line">    ✓ already-rejected</span><br><span class="line">    ✓ immediately-rejected</span><br><span class="line">    ✓ eventually-rejected</span><br><span class="line">872 passing (24s)</span><br></pre></td></tr></table></figure></p><h2 id="2-1-promise其他用法"><a href="#2-1-promise其他用法" class="headerlink" title="2.1 promise其他用法"></a>2.1 promise其他用法</h2><blockquote><p>自己实现的promise<br>cat Promise.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">class Promise &#123;</span><br><span class="line">  constructor(executor) &#123;</span><br><span class="line">    this.status = &apos;pending&apos;;</span><br><span class="line">    this.value = undefined;</span><br><span class="line">    this.reason = undefined;</span><br><span class="line">    this.onResolvedCallbacks = [];</span><br><span class="line">    this.onRejectedCallbacks = [];</span><br><span class="line">    let resolve = (value) =&gt; &#123;</span><br><span class="line">      if (this.status === &apos;pending&apos;) &#123;</span><br><span class="line">        this.status = &apos;resolved&apos;;</span><br><span class="line">        this.value = value;</span><br><span class="line">        this.onResolvedCallbacks.forEach(fn =&gt; fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    let reject = (reason) =&gt; &#123;</span><br><span class="line">      if (this.status === &apos;pending&apos;) &#123;</span><br><span class="line">        this.status = &apos;rejected&apos;;</span><br><span class="line">        this.reason = reason;</span><br><span class="line">        this.onRejectedCallbacks.forEach(fn =&gt; fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      reject(e); // 如果出现异常就走错误处理</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFufilled, onRejected) &#123;</span><br><span class="line">    // 默认成功和失败不传的情况</span><br><span class="line">    onFufilled = typeof onFufilled === &apos;function&apos; ? onFufilled : value =&gt; value;</span><br><span class="line">    onRejected = typeof onRejected === &apos;function&apos; ? onRejected : err =&gt; &#123; throw err &#125;</span><br><span class="line">    let promise2;</span><br><span class="line">    promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      if (this.status === &apos;resolved&apos;) &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            let x = onFufilled(this.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      if (this.status === &apos;rejected&apos;) &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            let x = onRejected(this.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.status === &apos;pending&apos;) &#123;</span><br><span class="line">        this.onResolvedCallbacks.push(() =&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              let x = onFufilled(this.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 0);</span><br><span class="line">        &#125;);</span><br><span class="line">        this.onRejectedCallbacks.push(() =&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              let x = onRejected(this.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 0);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return promise2;</span><br><span class="line">  &#125;</span><br><span class="line">  catch(fn)&#123;</span><br><span class="line">    return this.then(null,fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Promise.all = (promises) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    let index = 0;</span><br><span class="line">    let processData = (key, y) =&gt; &#123;</span><br><span class="line">      index++</span><br><span class="line">      result[key] = y;</span><br><span class="line">      if (promises.length === index) &#123;</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(y =&gt; &#123;</span><br><span class="line">        processData(i, y);</span><br><span class="line">      &#125;, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Promise.race =(promises) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    for (let i = 0; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Promise.resolve = function (data) &#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Promise.reject = function (data) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    reject(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 实现多套promise共用的情况</span><br><span class="line">function resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class="line">  if (promise2 === x) &#123;</span><br><span class="line">    return reject(new TypeError(&apos;循环引用&apos;));</span><br><span class="line">  &#125;</span><br><span class="line">  // &#123;then:&#123;&#125;&#125;</span><br><span class="line">  let called;</span><br><span class="line">  if (x != null &amp;&amp; (typeof x === &apos;object&apos; || typeof x === &apos;function&apos;)) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      let then = x.then; // 如果是对象 我就试着取一下then方法</span><br><span class="line">      if (typeof then === &apos;function&apos;) &#123; // 就是promise了</span><br><span class="line">        then.call(x, y =&gt; &#123;</span><br><span class="line">          // 成功和失败只能调用一个</span><br><span class="line">          if (called) return;</span><br><span class="line">          called = true;</span><br><span class="line">          // resolve的结果依旧是promise 那就继续解析</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, r =&gt; &#123;</span><br><span class="line">          if (called) return;</span><br><span class="line">          called = true;</span><br><span class="line">          reject(r);// 失败了就失败了</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        resolve(x); // 直接成功即可</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      if (called) return;</span><br><span class="line">      called = true;</span><br><span class="line">      reject(e); // 取then出错了那就不要在继续执行了</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 目前是通过他测试 他会测试一个对象</span><br><span class="line">// 语法糖</span><br><span class="line">Promise.defer = Promise.deferred = function () &#123;</span><br><span class="line">  let dfd = &#123;&#125;</span><br><span class="line">  dfd.promise = new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    dfd.resolve = resolve;</span><br><span class="line">    dfd.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line">  return dfd;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = Promise;</span><br><span class="line">// npm install  promises-aplus-tests -g</span><br><span class="line">// promises-aplus-tests</span><br></pre></td></tr></table></figure></p></blockquote><p>###2.1.1 defer源码实现及用法.js</p><blockquote><p>引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// Q库</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./Promise.js'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dfd = <span class="built_in">Promise</span>.defer();</span><br><span class="line">  fs.readFile(path, encoding, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> dfd.reject(err);</span><br><span class="line">    dfd.resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> dfd.promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'1.txt'</span>,<span class="string">'utf8'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)<span class="comment">//输出=&gt; 2.txt</span></span><br></pre></td></tr></table></figure></p></blockquote><p>###2.1.2 catch源码实现及用法.js</p><blockquote><p>引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let Promise = require(&apos;./Promise&apos;)</span><br><span class="line">let promise = new Promise((resove,reject)=&gt;&#123;</span><br><span class="line">  reject(&apos;错误&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">// 当前catch里只接受错误</span><br><span class="line">promise.then(null).catch(err=&gt;&#123;</span><br><span class="line">  console.log(&apos;2&apos;,err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.resolve(&apos;123&apos;).then(data=&gt;&#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">// 实现promise finaly是如何实现的</span><br><span class="line">/* 输出=&gt;</span><br><span class="line">123</span><br><span class="line">2 错误</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote><p>###2.1.3 All方法源码实现及用法.js</p><blockquote><p>引用<br>面试:<code>如何实现all和race源码</code><br>all:所有方法都成功才成功,否则失败。race为一个成功就成功,一个失败就失败。这里new promise用的是原生的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path, encoding, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> index =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> processData = <span class="function">(<span class="params">key, y</span>) =&gt;</span> &#123;</span><br><span class="line">      index++               <span class="comment">//每处理一次+1</span></span><br><span class="line">      result[key] = y;</span><br><span class="line">      <span class="keyword">if</span> (promises.length === index)&#123;</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="params">y</span> =&gt;</span> &#123;   <span class="comment">//使用then调用promise的all里面的方法</span></span><br><span class="line">        processData(i, y);      <span class="comment">//i为位置,y为函数的返回值</span></span><br><span class="line">      &#125;, reject);               <span class="comment">//失败直接reject</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//race为一个成功就成功,一个失败就失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">race</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">all([read(<span class="string">'1.txt'</span>, <span class="string">'utf8'</span>), read(<span class="string">'2.txt'</span>, <span class="string">'utf8'</span>)]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)<span class="comment">//输出=&gt; [ '2.txt', '数据' ]</span></span><br><span class="line"></span><br><span class="line">race([read(<span class="string">'1.txt'</span>, <span class="string">'utf8'</span>), read(<span class="string">'2.txt'</span>, <span class="string">'utf8'</span>)]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)<span class="comment">//输出=&gt; 2.txt</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cat 1.txt</span></span><br><span class="line"><span class="comment">2.txt</span></span><br><span class="line"><span class="comment">cat 2.txt</span></span><br><span class="line"><span class="comment">数据</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><p>###2.1.4 promisify及promisifyAll使每个方法都会多一个promise的方法</p><blockquote><p>实现,参考bluebird这个库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install bluebird</span></span><br><span class="line"><span class="comment">// let bluebird = require('bluebird');</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisifyAll</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(Object.keys(obj));   //可以拿到obj下面的所有方法,所有方法变成数组</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[item] === <span class="string">'function'</span>)&#123;</span><br><span class="line">      <span class="comment">// 把每一个函数 都promise化一下 ，每个方法都会多一个promise的方法</span></span><br><span class="line">      obj[item + <span class="string">'Async'</span>] = promisify(obj[item]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">promisifyAll(fs);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">readFile</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      readFile(...args,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let read = promisify(fs.readFile); // 就会返回一个promise方法</span></span><br><span class="line">fs.readFileAsync(<span class="string">'1.txt'</span>,<span class="string">'utf8'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)<span class="comment">//输出=&gt; 2.txt</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-1实现promise&quot;&gt;&lt;a href=&quot;#1-1实现promise&quot; class=&quot;headerlink&quot; title=&quot;1.1实现promise&quot;&gt;&lt;/a&gt;1.1实现promise&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Promises/A+规范官网&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://promisesaplus.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-1-1-promise特性一&quot;&gt;&lt;a href=&quot;#1-1-1-promise特性一&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 promise特性一&quot;&gt;&lt;/a&gt;1.1.1 promise特性一&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;promise会立即执行&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; promise = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve,reject&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*输出=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.arunyang.com/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://www.arunyang.com/tags/NodeJS/"/>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>generator+async-wait</title>
    <link href="http://www.arunyang.com/2018/06/17/003%E8%AF%BE%E4%BB%B67_7.generator+async-wait/"/>
    <id>http://www.arunyang.com/2018/06/17/003课件7_7.generator+async-wait/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-07-14T16:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="generator-async-await"><a href="#generator-async-await" class="headerlink" title="generator+async await"></a>generator+async await</h1><h2 id="1-1-源码讲解"><a href="#1-1-源码讲解" class="headerlink" title="1.1 源码讲解"></a>1.1 源码讲解</h2><blockquote><p>redux-saga</p></blockquote><p>  <code>koa1.0 generator --&gt; kos async await</code></p><h3 id="1-1-1-是否可迭代比较"><a href="#1-1-1-是否可迭代比较" class="headerlink" title="1.1.1 是否可迭代比较"></a>1.1.1 是否可迭代比较</h3><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = &#123; <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="attr">length</span>: <span class="number">2</span>&#125; <span class="comment">//给类数组增加可迭代的函数才可以迭代</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123; <span class="comment">//报错=&gt; TypeError: arr is not iterable</span></span><br><span class="line"><span class="comment">// for (let item of [1,2,3])&#123;</span></span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125; <span class="comment">//输出=&gt; 1 2 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">arguments</span>)&#123; <span class="comment">//arguments不是数组</span></span><br><span class="line">        <span class="built_in">console</span>.log(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//输出=&gt; 1 2 3</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-1-2实现迭代器"><a href="#1-1-2实现迭代器" class="headerlink" title="1.1.2实现迭代器"></a>1.1.2实现迭代器</h3><blockquote><p><strong>生成器返回的是迭代器</strong></p></blockquote><blockquote><p><code>迭代器</code>:迭代器必须返回一个对象对象里有一个next方法，每调用一次next方法就可以返回一个对象。 done表示是否迭代完成, value表示为迭代的结果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = &#123; <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="attr">length</span>: <span class="number">2</span> ,[<span class="built_in">Symbol</span>.iterator]:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: index === len, <span class="attr">value</span>: that[index++]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125; <span class="comment">//输出=&gt; 1 2</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-generator的”-”和”yeild”"><a href="#1-1-2-generator的”-”和”yeild”" class="headerlink" title="1.1.2 generator的”*”和”yeild”"></a>1.1.2 generator的”*”和”yeild”</h3><blockquote><p>generator 必须要有*  配合yeild ,碰到yield 就停止，再次调用next就继续走<br><code>当遇到return时就迭代完成了</code><br>第一个next传递参数是没有效果的<br>第二次next传递的参数 是第一次yield的返回值<br>原理图解:<br><img src="/2018/06/17/003课件7_7.generator+async-wait/001.png"><br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = thing();</span><br><span class="line"><span class="comment">// console.log(it.next());</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'2000'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'4000'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'end000'</span>));</span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: '4000', done: true &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-3-generator应用案例之promisify"><a href="#1-1-3-generator应用案例之promisify" class="headerlink" title="1.1.3 generator应用案例之promisify"></a>1.1.3 generator应用案例之promisify</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt</span><br><span class="line">2.txt</span><br><span class="line">cat 2.txt</span><br><span class="line">我很帅</span><br></pre></td></tr></table></figure><blockquote><p>实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blueBird =<span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> read = blueBird.promisify(fs.readFile);</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">readMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data1 = <span class="keyword">yield</span> read(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">let</span> data2 = <span class="keyword">yield</span> read(data1,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">return</span> data2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = readMethod();</span><br><span class="line">it.next().value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  it.next(data).value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; done, value &#125; = it.next(data);</span><br><span class="line">    <span class="built_in">console</span>.log(done,value);  <span class="comment">//输出=&gt; true '我很帅'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="1-1-3-async-await等价的“generator-co库”的实现"><a href="#1-1-3-async-await等价的“generator-co库”的实现" class="headerlink" title="1.1.3 async+await等价的“generator+co库”的实现"></a>1.1.3 async+await等价的“generator+co库”的实现</h4><p><code>async+await &lt;==&gt; generator+co库</code></p><blockquote><p>改进以及开源co库的实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blueBird =<span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> read = blueBird.promisify(fs.readFile);</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">readMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data1 = <span class="keyword">yield</span> read(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">let</span> data2 = <span class="keyword">yield</span> read(data1,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">return</span> data2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*let it = readMethod();</span></span><br><span class="line"><span class="comment">it.next().value.then(data =&gt; &#123;</span></span><br><span class="line"><span class="comment">  it.next(data).value.then(data =&gt; &#123;</span></span><br><span class="line"><span class="comment">    let &#123; done, value &#125; = it.next(data);</span></span><br><span class="line"><span class="comment">    console.log(done,value);</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">it</span>) </span>&#123;   <span class="comment">//开源co库的实现</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 异步调用的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; value, done &#125; = it.next(data);</span><br><span class="line">      <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">        value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          next(data)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let co = require('co'); //generator async =&gt; async flow generator coro coroutine</span></span><br><span class="line"><span class="comment">//git地址:https://github.com/tj/co   tj为express作者</span></span><br><span class="line"><span class="comment">// 获取1.txt内容 2.txt 2.txt放的内容是最终的结果</span></span><br><span class="line">co(readMethod()).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);  <span class="comment">//输出=&gt; 我很帅</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-1-4-async-await使用"><a href="#1-1-4-async-await使用" class="headerlink" title="1.1.4 async+await使用"></a>1.1.4 async+await使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这就是一个语法糖</span></span><br><span class="line"><span class="keyword">let</span> blueBird =<span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> read = blueBird.promisify(fs.readFile);</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">readMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data1 = <span class="keyword">await</span> read(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">let</span> data2 = <span class="keyword">await</span> read(data1,<span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">return</span> data2;</span><br><span class="line">&#125;</span><br><span class="line">readMethod().then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);  <span class="comment">//输出=&gt; 我很帅</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>通过babeljs.io转译后async和await的源码实现,function _asyncToGenerator(fn)函数部分(同function co(it))<br><code>http://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=IYZwngdgxgBAZgV2gFwJYHsIwE4FNgAmAsrsgBboEAUAlDAN4BQMMANqTAcMsAIwwBeGMADuwVMhz5qAcgB0Ael5zkAD2QyANDITI4ADhk0A3MzYcuPAEyDhYiVMJVLfbboNHTLPMgTYsLlamAL5AA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=</code></p></blockquote><h2 id="1-2-实际应用"><a href="#1-2-实际应用" class="headerlink" title="1.2 实际应用"></a>1.2 实际应用</h2><blockquote><p>一共四种实现方式</p></blockquote><h3 id="1-2-1-callback方式"><a href="#1-2-1-callback方式" class="headerlink" title="1.2.1 callback方式"></a>1.2.1 callback方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;  /* *表示匹配所有 */</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    div div &#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      border-radius: 50%;</span></span><br><span class="line"><span class="undefined">      background: red</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball1 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball2 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 110px;   /* 中间差10px*/</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span>   <span class="comment">&lt;!--这里表示是在同一个轴上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> $ = <span class="built_in">document</span>.querySelector.bind(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ball1 = <span class="built_in">document</span>.getElementById(<span class="string">'ball1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ball2 = <span class="built_in">document</span>.getElementById(<span class="string">'ball2'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> $);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">el, target, cb</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">          timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (index &gt;= target) &#123;</span></span><br><span class="line"><span class="undefined">              clearInterval(timer);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> cb();</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              el.style.left = ++index + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;, 3);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/*        move($('#ball1'), 500, function () &#123;</span></span><br><span class="line"><span class="javascript">            move($(<span class="string">'#ball2'</span>), <span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'移动完成'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)*/</span></span><br><span class="line"><span class="javascript">        move(ball1, <span class="number">300</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            move(ball2, <span class="number">300</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'移动完成'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        /*move($('#ball1'), 500, function () &#123;   //第一种方式：回调</span></span><br><span class="line"><span class="javascript">          move($(<span class="string">'#ball2'</span>), <span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'移动完成'</span>)</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)*/</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-Promise方式"><a href="#1-2-2-Promise方式" class="headerlink" title="1.2.2 Promise方式"></a>1.2.2 Promise方式</h3><blockquote><p>Promise的链式写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div div &#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      border-radius: 50%;</span></span><br><span class="line"><span class="undefined">      background: red</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball1 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball2 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 110px;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $ = <span class="built_in">document</span>.querySelector.bind(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">el, target, cb</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (index &gt;= target) &#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(timer)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> resolve();</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.left = ++index + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;, 3);</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    move($(<span class="string">'#ball1'</span>), <span class="number">500</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> move($(<span class="string">'#ball2'</span>), <span class="number">500</span>)</span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;   <span class="comment">/*链式写法,根据上边的返回值*/</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'ok'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-2-3-generator-co库方式"><a href="#1-2-3-generator-co库方式" class="headerlink" title="1.2.3 generator+co库方式"></a>1.2.3 generator+co库方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div div &#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      border-radius: 50%;</span></span><br><span class="line"><span class="undefined">      background: red</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball1 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball2 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 110px;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $ = <span class="built_in">document</span>.querySelector.bind(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">el, target, cb</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (index &gt;= target) &#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(timer)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> resolve();</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.left = ++index + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">3</span>); <span class="comment">//3s超时</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> *<span class="title">m</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">yield</span> move($(<span class="string">'#ball1'</span>),<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">yield</span> move($(<span class="string">'#ball2'</span>),<span class="number">500</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">it</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> &#123;value ,done&#125; = it.next(data);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(done)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(!done)&#123;</span></span><br><span class="line"><span class="javascript">            value.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="undefined">              next(data);</span></span><br><span class="line"><span class="undefined">            &#125;,reject);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">            resolve(data);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        next();</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    co(m()).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,err=&gt;&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-async-await方式"><a href="#1-2-3-async-await方式" class="headerlink" title="1.2.3 async+await方式"></a>1.2.3 async+await方式</h3><blockquote><p>async和await可以支持 try catch<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div div &#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      border-radius: 50%;</span></span><br><span class="line"><span class="undefined">      background: red</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball1 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #ball2 &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 110px;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $ = <span class="built_in">document</span>.querySelector.bind(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">el, target, cb</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// throw new Error();</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (index &gt;= target) &#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(timer)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> resolve();;</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.left = ++index + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;, 3);</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// async和await可以支持 try catch</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// try&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">await</span> move($(<span class="string">'#ball1'</span>), <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">await</span> move($(<span class="string">'#ball2'</span>), <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;catch(e)&#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(e);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    m().then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>所有效果如下 </strong><br><img src="/2018/06/17/003课件7_7.generator+async-wait/Users/00arunalldata00/009_mystudy/012_mygithub_blog/itcomputer12.github.io/arunyang/source/_posts/2018069/002.jpg" alt="002"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;generator-async-await&quot;&gt;&lt;a href=&quot;#generator-async-await&quot; class=&quot;headerlink&quot; title=&quot;generator+async await&quot;&gt;&lt;/a&gt;generator+async await&lt;/h1&gt;&lt;h2 id=&quot;1-1-源码讲解&quot;&gt;&lt;a href=&quot;#1-1-源码讲解&quot; class=&quot;headerlink&quot; title=&quot;1.1 源码讲解&quot;&gt;&lt;/a&gt;1.1 源码讲解&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;redux-saga&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;code&gt;koa1.0 generator --&amp;gt; kos async await&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-1-是否可迭代比较&quot;&gt;&lt;a href=&quot;#1-1-1-是否可迭代比较&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 是否可迭代比较&quot;&gt;&lt;/a&gt;1.1.1 是否可迭代比较&lt;/h3&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//给类数组增加可迭代的函数才可以迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; arr)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//报错=&amp;gt; TypeError: arr is not iterable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for (let item of [1,2,3])&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//输出=&amp;gt; 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//arguments不是数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//输出=&amp;gt; 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.arunyang.com/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://www.arunyang.com/tags/NodeJS/"/>
    
      <category term="JavaScript" scheme="http://www.arunyang.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
