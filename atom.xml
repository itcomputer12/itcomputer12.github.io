<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arunyang</title>
  
  <subtitle>Linux,Golang,JS,Java</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.arunyang.com/"/>
  <updated>2018-06-18T17:21:40.000Z</updated>
  <id>http://www.arunyang.com/</id>
  
  <author>
    <name>arunyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2-1/2.高阶函数</title>
    <link href="http://www.arunyang.com/2018/06/17/2-1:2.%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://www.arunyang.com/2018/06/17/2-1:2.高阶函数/</id>
    <published>2018-06-17T13:59:26.000Z</published>
    <updated>2018-06-18T17:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-1开篇"><a href="#1-1开篇" class="headerlink" title="1.1开篇"></a>1.1开篇</h2><h3 id="1-1-1-编辑器"><a href="#1-1-1-编辑器" class="headerlink" title="1.1.1 编辑器"></a>1.1.1 编辑器</h3><ul><li>vscode webstorm </li><li>code runner (可以片段运行代码)<h3 id="1-1-2-es6"><a href="#1-1-2-es6" class="headerlink" title="1.1.2 es6"></a>1.1.2 es6</h3></li></ul><h3 id="1-1-1-1-异步的发展流程"><a href="#1-1-1-1-异步的发展流程" class="headerlink" title="1.1.1.1 异步的发展流程"></a>1.1.1.1 异步的发展流程</h3><h4 id="1-1-1-1-异步和同步的区别"><a href="#1-1-1-1-异步和同步的区别" class="headerlink" title="1.1.1.1 异步和同步的区别"></a>1.1.1.1 异步和同步的区别</h4><ul><li>异步(setTimeout ajax 事件)和同步的区别:<br>同步表示连续执行，异步表示非连续执行<h4 id="1-1-1-2-回调函数的两种表现形式"><a href="#1-1-1-2-回调函数的两种表现形式" class="headerlink" title="1.1.1.2 回调函数的两种表现形式"></a>1.1.1.2 回调函数的两种表现形式</h4></li><li>回调函数 函数(封装，私有化),即以下两种方式:<br>(1)高阶函数,一个函数执行后返回一个函数(2)函数可以当作参数传递给另一个函数</li></ul><h2 id="2-1柯里化"><a href="#2-1柯里化" class="headerlink" title="2.1柯里化"></a>2.1柯里化</h2><h3 id="2-1-1-柯里化和偏函数的解释"><a href="#2-1-1-柯里化和偏函数的解释" class="headerlink" title="2.1.1 柯里化和偏函数的解释"></a>2.1.1 柯里化和偏函数的解释</h3><blockquote><p>即:函数返回函数 ==别的叫法==&gt; 柯里化 偏函数…</p></blockquote><h3 id="2-1-2-判断内容的类型"><a href="#2-1-2-判断内容的类型" class="headerlink" title="2.1.2 判断内容的类型"></a>2.1.2 判断内容的类型</h3><p>// 判断内容的类型<br>// Object.prototype.toString.call(‘aaa’) = ‘[object Null]’<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断类型 有四种 constructor typeof instanceof Object.prototype.toString</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">content,Type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">Object</span>.prototype.toString.call(content).replace(<span class="regexp">/\[object\s|\]/g</span>,<span class="string">''</span>); <span class="comment">//String</span></span><br><span class="line">  <span class="keyword">return</span> Type === str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = isType(<span class="string">'hello'</span>,<span class="string">'String'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//输出:true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>优化,类回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function isType(type) &#123;</span><br><span class="line">  return function (content) &#123;</span><br><span class="line">    let str = Object.prototype.toString.call(content).replace(/\[object\s|\]/g, &apos;&apos;);</span><br><span class="line">    return type === str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let util = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let type = [&apos;String&apos;,&apos;Object&apos;,&apos;Null&apos;,&apos;Function&apos;];</span><br><span class="line"></span><br><span class="line">type.forEach((item)=&gt;&#123;</span><br><span class="line">  util[&apos;is&apos;+item] = isType(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(util);</span><br><span class="line">console.log(util.isString(&apos;hello&apos;));</span><br><span class="line">console.log(util.isObject(&apos;Object&apos;));</span><br><span class="line">console.log(util.isNull(&apos;Null&apos;));</span><br><span class="line">console.log(util.isFunction(&apos;Function&apos;));</span><br><span class="line">/*输出=&gt;</span><br><span class="line">&#123; isString: [Function],</span><br><span class="line">  isObject: [Function],</span><br><span class="line">  isNull: [Function],</span><br><span class="line">  isFunction: [Function] &#125;</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-1-回调函数底层原理"><a href="#3-1-回调函数底层原理" class="headerlink" title="3.1 回调函数底层原理"></a>3.1 回调函数底层原理</h2><blockquote><p>回调函数(不一定是异步的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 预置参数 lodash after</span><br><span class="line">function after(times,callback) &#123;</span><br><span class="line">  console.log(&apos;111****:&apos;+times);</span><br><span class="line">  return function () &#123;</span><br><span class="line">    console.log(&apos;222+++:&apos;+times);</span><br><span class="line">    if(--times === 0)&#123;</span><br><span class="line">      console.log(&apos;333====:&apos;+times);</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let eat = after(3,function () &#123;</span><br><span class="line">  console.log(&apos;吃完了&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">eat();</span><br><span class="line">eat();</span><br><span class="line">eat();</span><br><span class="line">/*输出=&gt;</span><br><span class="line">111****:3</span><br><span class="line">222+++:3</span><br><span class="line">222+++:2</span><br><span class="line">222+++:1</span><br><span class="line">333====:0</span><br><span class="line">吃完了</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line">after(3,function () &#123;console.log(&apos;吃完了&apos;)&#125;)();</span><br><span class="line">/*输出=&gt;</span><br><span class="line">111****:3</span><br><span class="line">222+++:3</span><br><span class="line">111****:3</span><br><span class="line">222+++:3</span><br><span class="line">111****:3</span><br><span class="line">222+++:3</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-1-1-回调函数的缺点"><a href="#3-1-1-回调函数的缺点" class="headerlink" title="3.1.1 回调函数的缺点"></a>3.1.1 回调函数的缺点</h3><blockquote><p>1) 异步方法如果出错了不能捕获try/catch错误<br>2) 获取的结果不能通过return返回<br>3) 回调函数可能会产生 (回调地狱)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//cat 1.txt   =&gt;   模板</span><br><span class="line">//cat 2.txt   =&gt;   数据</span><br><span class="line">// 我们可以引用一个模块 操作文件</span><br><span class="line">let fs = require(&apos;fs&apos;);</span><br><span class="line">// 相当于两个异步请求 有关系 关系是第二个请求 是依赖于第一个的</span><br><span class="line">fs.readFile(&apos;./1.txt&apos;, &apos;utf8&apos;, function (err, a) &#123; // error-first</span><br><span class="line">    fs.readFile(&apos;./2.txt&apos;, &apos;utf8&apos;, function (err, b) &#123; // error-first</span><br><span class="line">        console.log(a, b)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">/*输出=&gt;</span><br><span class="line">模板 数据</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-1-2-同时两个异步请求问题的规避"><a href="#3-1-2-同时两个异步请求问题的规避" class="headerlink" title="3.1.2 同时两个异步请求问题的规避"></a>3.1.2 同时两个异步请求问题的规避</h3><blockquote><p>两个异步请求 同时拿到两个异步请求的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params">times,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// args = [1,2,3]</span></span><br><span class="line">        arr.push(data);</span><br><span class="line">        <span class="keyword">if</span>(--times === <span class="number">0</span>)&#123;</span><br><span class="line">            callback(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> out = after(<span class="number">2</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// []</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, a</span>) </span>&#123;</span><br><span class="line">    out(a);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(<span class="string">'./2.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, b</span>) </span>&#123;</span><br><span class="line">    out(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*输出=&gt;</span></span><br><span class="line"><span class="comment">[ '模板', '数据' ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-1-3-回调函数及发布订阅原理代码演示"><a href="#3-1-3-回调函数及发布订阅原理代码演示" class="headerlink" title="3.1.3 回调函数及发布订阅原理代码演示"></a>3.1.3 回调函数及发布订阅原理代码演示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 发布(这件事发生时 我要依次执行) 订阅(我预先想到的事)</span></span><br><span class="line"><span class="keyword">let</span> events = &#123;</span><br><span class="line">  cbs:[],</span><br><span class="line">  results:[],</span><br><span class="line">  on(cb)&#123;</span><br><span class="line">    <span class="keyword">this</span>.cbs.push(cb);</span><br><span class="line">  &#125;,</span><br><span class="line">  emit(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.results.push(data);</span><br><span class="line">    <span class="comment">// this.cbs.forEach(fn =&gt; fn(this.results))</span></span><br><span class="line">    <span class="keyword">this</span>.cbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn(<span class="keyword">this</span>.results);  <span class="comment">//这种方式是箭头函数的简写</span></span><br><span class="line">        <span class="comment">// fn(this.results);</span></span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 订阅的过程</span></span><br><span class="line">  <span class="comment">// if(data.length === 2)&#123;</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 订阅的过程</span></span><br><span class="line">  <span class="built_in">console</span>.log(data+<span class="string">' =&gt; 很棒'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, a</span>) </span>&#123;</span><br><span class="line">   events.emit(a);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(<span class="string">'./2.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, b</span>) </span>&#123;</span><br><span class="line">  events.emit(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* 输出=&gt;</span></span><br><span class="line"><span class="comment">[ '模板' ]</span></span><br><span class="line"><span class="comment">模板 =&gt; 很棒</span></span><br><span class="line"><span class="comment">[ '模板', '数据' ]</span></span><br><span class="line"><span class="comment">模板,数据 =&gt; 很棒</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-1开篇&quot;&gt;&lt;a href=&quot;#1-1开篇&quot; class=&quot;headerlink&quot; title=&quot;1.1开篇&quot;&gt;&lt;/a&gt;1.1开篇&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-编辑器&quot;&gt;&lt;a href=&quot;#1-1-1-编辑器&quot; class=&quot;h
      
    
    </summary>
    
    
  </entry>
  
</feed>
