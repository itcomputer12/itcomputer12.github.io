<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arunyang</title>
  
  <subtitle>Linux,Golang,JS,Java</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.arunyang.com/"/>
  <updated>2018-06-18T04:03:27.000Z</updated>
  <id>http://www.arunyang.com/</id>
  
  <author>
    <name>arunyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js</title>
    <link href="http://www.arunyang.com/2018/06/16/hello-world/"/>
    <id>http://www.arunyang.com/2018/06/16/hello-world/</id>
    <published>2018-06-16T15:58:24.000Z</published>
    <updated>2018-06-18T04:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>#1 继承</p><p>##1.1</p><blockquote><p>如何实现一个类？<br>  类的继承 三种属性 公有属性(<strong>proto</strong>) 私有属性 静态方法(静态属性)</p></blockquote><p>###1.1.1公有属性(<strong>proto</strong>)及私有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数中的this 通过new调用的那么this指代的是实例</span></span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1)</span></span><br><span class="line"><span class="built_in">console</span>.log(Parent.prototype.constructor ===Parent); <span class="comment">//输出:true</span></span><br><span class="line"><span class="comment">// 2)</span></span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.__proto__.eat(); <span class="comment">//输出:eat 会先去找私有属性找不到再去找公有属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">9</span>;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>); <span class="comment">//等价于 this.name = 'parent';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child.__proto__.constructor == Child); <span class="comment">//输出:true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> child.constructor); <span class="comment">//输出:function</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Child.age); <span class="comment">//拿属性应该通过实例child.age</span></span><br><span class="line"><span class="built_in">console</span>.log(child.age); <span class="comment">//输出:9</span></span><br><span class="line"><span class="comment">// 一.继承私有属性 Parent.call(this);</span></span><br><span class="line"><span class="built_in">console</span>.log(child.name); <span class="comment">//输出:parent</span></span><br></pre></td></tr></table></figure></p><p><strong>图解</strong><br><img src="index_files/10215671.png" alt="001图"></p><p>###1.1.2 类的继承</p><p>###1.1.2.1 继承的错误的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">9</span>;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line">Child.prototype = Parent.prototype; <span class="comment">//指向同一个,儿子改父亲也会改,比较危险,不推荐这么搞。不是父子成兄弟了,共享一个媳妇,乱套了</span></span><br><span class="line"><span class="comment">// 继承公有属性和私有属性</span></span><br><span class="line"><span class="comment">// Child.prototype = new Parent(); // 不会使用这种方式</span></span><br><span class="line">Child.prototype.smoking = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'吸烟'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.eat(); <span class="comment">//输出:eat</span></span><br><span class="line">Child.prototype.a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="built_in">console</span>.log(parent.a); <span class="comment">//输出:100</span></span><br></pre></td></tr></table></figure></p><p><strong>图解</strong><br><img src="index_files/11500925.png" alt="002图"></p><p>###1.1.2.2 继承的正确的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">9</span>;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype.smoking = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'吸烟'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1）正确写法:</span></span><br><span class="line"><span class="comment">// Child.prototype.__proto__ = Parent.prototype; //老的写法</span></span><br><span class="line"><span class="comment">// Object.setPrototypeOf(Child.prototype, Parent.prototype); //ES6写法。等同于上一句的写法,这个种使用方式更正规,效果一样</span></span><br><span class="line"><span class="comment">//2）只继承公有属性:</span></span><br><span class="line"><span class="comment">//实现Object.create()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">parentPrototype</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//Fn()是实例,得等它去原型上找</span></span><br><span class="line">    Fn.prototype = parentPrototype;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = create(Parent.prototype);</span><br><span class="line"><span class="comment">// Child.prototype = Object.create(Parent.prototype);</span></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.eat(); <span class="comment">// 输出:eat</span></span><br><span class="line"><span class="built_in">console</span>.log(child.constructor); <span class="comment">// 输出:[Function: Parent]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3）继承Child:</span></span><br><span class="line"><span class="comment">//实现Object.create(Parent.prototype,&#123;constructor:&#123;value:Child&#125;&#125;);</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">parentPrototype,props</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = parentPrototype;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="keyword">new</span> Fn();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> props)&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(fn, key, &#123;</span><br><span class="line">      ...props[key],</span><br><span class="line">      enumerable:<span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Child.prototype = Object.create(Parent.prototype,&#123;constructor:&#123;value:Child&#125;&#125;);</span></span><br><span class="line"><span class="comment">let child = new Child();</span></span><br><span class="line"><span class="comment">console.log(child.constructor); //输出:[Function: Child]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><blockquote><p>(1)相当于建了一个空的构造函数,指向父类的原型,相当于一个中转。(2)改变实例,父亲的原型不变。<br><img src="index_files/11603266.png" alt="003图"><br>这里parentPrototype最终指向Parent类,也就是child.constructor指向Parent类。<br><img src="index_files/20681490.png" alt="004图"></p></blockquote><p>##1.2</p><p>###1.2.1 Object.defineProperty()方法详解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="comment">// a.name = 1;</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">'name'</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>, <span class="comment">// 表示这个属性是否可以被枚举出来</span></span><br><span class="line">  configurable: <span class="literal">true</span>, <span class="comment">// 表示这个属性是否可被删除</span></span><br><span class="line">  <span class="comment">// writable:true, //是否这个属性能够被改</span></span><br><span class="line">  get() &#123; <span class="comment">// value可以替换成set和get</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  set(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'设置值'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">//输出: get 1</span></span><br><span class="line">a.name = <span class="number">200</span>;<span class="comment">//输出: 设置值</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;#1 继承&lt;/p&gt;
&lt;p&gt;##1.1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何实现一个类？&lt;br&gt;  类的继承 三种属性 公有属性(&lt;strong&gt;proto&lt;/strong&gt;) 私有属性 静态方法(静态属性)&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>﻿node.js初识和特性</title>
    <link href="http://www.arunyang.com/2018/06/16/node.js%E5%88%9D%E8%AF%86%E5%92%8C%E7%89%B9%E6%80%A7/"/>
    <id>http://www.arunyang.com/2018/06/16/node.js初识和特性/</id>
    <published>2018-06-16T15:58:24.000Z</published>
    <updated>2018-06-18T04:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>﻿<br>[TOC]</p><h1 id="1-1初识node-js-1"><a href="#1-1初识node-js-1" class="headerlink" title="1.1初识node.js(1)"></a>1.1初识node.js(1)</h1><p>1.流行的语言排行站点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://code.google.com/</span><br><span class="line">https://archive.codeplex.com/</span><br><span class="line">https://www.codeproject.com/</span><br></pre></td></tr></table></figure></p><p>2.nodejs官网<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.dcloud.io/ #hbuilder代码提示功能</span><br></pre></td></tr></table></figure></p><p>3.Javascript是其编程语言<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虚拟机性能：Google V8本身使用了一些最新的编译技术，使得Js运行效率相当高；</span><br><span class="line">开发成本：Javascript活跃于浏览器上，使用人数多，入门成本较低；</span><br><span class="line">没有历史包袱：Javascript单线程，没有服务端的IO处理，没有各种历史存在的库。</span><br></pre></td></tr></table></figure></p><p>##1_1</p><h3 id="js循环"><a href="#js循环" class="headerlink" title="js循环"></a>js循环</h3><p>1_1.1 代码循环示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'111'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="node启动httpserver"><a href="#node启动httpserver" class="headerlink" title="node启动httpserver"></a>node启动httpserver</h3><p>2_1.1 node启动httpserver<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.write(<span class="string">"webcome to arun\'s world!"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaaa"</span>);</span><br><span class="line">&#125;).listen(<span class="number">8999</span>);</span><br></pre></td></tr></table></figure></p><p>##2_1</p><h3 id="Js同步异步"><a href="#Js同步异步" class="headerlink" title="Js同步异步"></a>Js同步异步</h3><h4 id="2-1-1-输出文件夹下文件"><a href="#2-1-1-输出文件夹下文件" class="headerlink" title="2_1.1 输出文件夹下文件"></a>2_1.1 输出文件夹下文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个异步的过程:输出文件夹下的文件</span></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readdir(<span class="string">"."</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, filenames</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; filenames.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(filenames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'End.'</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-2-js程序模块化和程序可读性"><a href="#2-1-2-js程序模块化和程序可读性" class="headerlink" title="2_1.2 js程序模块化和程序可读性"></a>2_1.2 js程序模块化和程序可读性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//###二、js程序模块化和程序可读性</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> pub = &#123;</span><br><span class="line">        setName: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            p.name = name;</span><br><span class="line">        &#125;,</span><br><span class="line">        getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> pub;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person(<span class="string">'name1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName());</span><br><span class="line"><span class="built_in">console</span>.log(p1.age)</span><br><span class="line"></span><br><span class="line">p1.setName(<span class="string">"name2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name1</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-js封装继承多态经典案例"><a href="#2-1-3-js封装继承多态经典案例" class="headerlink" title="2_1.3 js封装继承多态经典案例"></a>2_1.3 js封装继承多态经典案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'Name'</span>;</span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I can say.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p=<span class="keyword">new</span> parent();</span><br><span class="line">    p.name1=<span class="string">'Name1'</span>;</span><br><span class="line">    p.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Child say.'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> parent();</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//Name</span></span><br><span class="line">p.say(); <span class="comment">//I can say.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c=<span class="keyword">new</span> child();</span><br><span class="line"><span class="built_in">console</span>.log(c.name); <span class="comment">//Name 继承</span></span><br><span class="line"><span class="built_in">console</span>.log(c.name1); <span class="comment">//Name1</span></span><br><span class="line">c.say(); <span class="comment">//Child say. 重载</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-js同步异步区别"><a href="#2-1-4-js同步异步区别" class="headerlink" title="2_1.4 js同步异步区别"></a>2_1.4 js同步异步区别</h4><blockquote><p>代码演示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> exec=<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例化一个服务器</span></span><br><span class="line"><span class="keyword">var</span> server=http.createServer(onRequest);</span><br><span class="line"><span class="comment">//设置监听端口</span></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server is starting..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义请求触发时的执行代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request,response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Accept a request!"</span>);</span><br><span class="line">    <span class="comment">// sync();</span></span><br><span class="line">    <span class="keyword">async</span>(response);</span><br><span class="line">    <span class="comment">// response.write("You send a request!");</span></span><br><span class="line">    <span class="comment">// response.end();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; time+<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    exec(<span class="string">'find /'</span>,&#123;<span class="attr">time</span>:<span class="number">1000</span>,<span class="attr">maxBuffer</span>:<span class="number">2048</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err,stdout,stderr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start exec"</span>);</span><br><span class="line">        res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">"text/plain"</span>,<span class="string">'charset'</span>:<span class="string">'utf-8'</span>&#125;);</span><br><span class="line">        <span class="comment">// res.write('正在执行异步方法.');</span></span><br><span class="line">        res.write(stdout);</span><br><span class="line">        res.write(<span class="string">'Find complete'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>同步调用过程</strong>,如图可以看到阻塞了,请求非常的慢<br><img src="index_files/28354480.png" alt="同步调用过程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-1初识node-js-1&quot;&gt;&lt;a href=&quot;#1-1初识node-js-1&quot; class=&quot;headerlink&quot; title=&quot;1.1初识node.js(1)&quot;&gt;&lt;/a&gt;1.1初识node.js(1)&lt;/h1&gt;&lt;p&gt;1.
      
    
    </summary>
    
    
  </entry>
  
</feed>
